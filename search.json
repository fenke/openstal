[
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "core",
    "section": "",
    "text": "source\n\n\n\n init_console_logging (name, level=20, timestamp=True, formatstring='')\n\nSetup none-blocking stream handler for sending loggin to the console.",
    "crumbs": [
      "core"
    ]
  },
  {
    "objectID": "core.html#logging",
    "href": "core.html#logging",
    "title": "core",
    "section": "",
    "text": "source\n\n\n\n init_console_logging (name, level=20, timestamp=True, formatstring='')\n\nSetup none-blocking stream handler for sending loggin to the console.",
    "crumbs": [
      "core"
    ]
  },
  {
    "objectID": "core.html#various-functions",
    "href": "core.html#various-functions",
    "title": "core",
    "section": "Various functions",
    "text": "Various functions\n\nsource\n\ndict_structure\n\n dict_structure (the_dict:dict, indent='    ')\n\n\n\nCode\nprint(dict_structure({\n    \"key_1\": \"A string\",\n    \"longerkey_2\": [1,2,3],\n    \"key_3\": dict(a=[], b=\"2\", c=3)\n}))\n\n\n    key_1           :   &lt;class 'str'&gt;\n    longerkey_2     :   &lt;class 'list'&gt;\n    key_3           :   &lt;class 'dict'&gt;\n        a               :   &lt;class 'list'&gt;\n        b               :   &lt;class 'str'&gt;\n        c               :   &lt;class 'int'&gt;",
    "crumbs": [
      "core"
    ]
  },
  {
    "objectID": "core.html#date-time",
    "href": "core.html#date-time",
    "title": "core",
    "section": "Date & time",
    "text": "Date & time\n\nsource\n\nunix_time\n\n unix_time (some_time)\n\nConvert to unix (epoch) timestamp\n\nsource\n\n\nmake_naive_tzaware\n\n make_naive_tzaware (d, tz='UTC')\n\n\nsource\n\n\nmake_naive_utc\n\n make_naive_utc (d)\n\n\nsource\n\n\nmake_datetime\n\n make_datetime (d)",
    "crumbs": [
      "core"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "openstal",
    "section": "",
    "text": "This file will become your README and also the index of your documentation.",
    "crumbs": [
      "openstal"
    ]
  },
  {
    "objectID": "index.html#developer-guide",
    "href": "index.html#developer-guide",
    "title": "openstal",
    "section": "Developer Guide",
    "text": "Developer Guide\nIf you are new to using nbdev here are some useful pointers to get you started.\n\nInstall openstal in Development mode\n# make sure openstal package is installed in development mode\n$ pip install -e .\n\n# make changes under nbs/ directory\n# ...\n\n# compile to have changes apply to openstal\n$ nbdev_prepare",
    "crumbs": [
      "openstal"
    ]
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "openstal",
    "section": "Usage",
    "text": "Usage\n\nInstallation\nInstall latest from the GitHub repository:\n$ pip install git+https://github.com/fenke/openstal.git\nor from conda\n$ conda install -c fenke openstal\nor from pypi\n$ pip install openstal\n\n\nDocumentation\nDocumentation can be found hosted on this GitHub repository’s pages. Additionally you can find package manager specific guidelines on conda and pypi respectively.",
    "crumbs": [
      "openstal"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "openstal",
    "section": "How to use",
    "text": "How to use\nFill me in please! Don’t forget code examples:\n\n\nCode\n1+1\n\n\n2",
    "crumbs": [
      "openstal"
    ]
  },
  {
    "objectID": "stal_massabalans.html",
    "href": "stal_massabalans.html",
    "title": "Barn Mass Balance",
    "section": "",
    "text": "Code\nimport os, json",
    "crumbs": [
      "Barn Mass Balance"
    ]
  },
  {
    "objectID": "stal_massabalans.html#achtergrond",
    "href": "stal_massabalans.html#achtergrond",
    "title": "Barn Mass Balance",
    "section": "Achtergrond",
    "text": "Achtergrond\nIn Nederland is men momenteel vooral geïnteresseerd in de emissie uit stallen met dieren. We kunnen onderscheid maken tussen 2 type stallen: de natuurlijk geventileerde stallen (open stallen) en de mechanisch geventileerde stallen (gesloten stallen). Over het algemeen zitten melkkoeien (en -geiten) in open stallen en zitten de intensievere dieren (pluimvee, varkens, kalveren) in gesloten stallen.\n\nEmissieberekening\nEmissie wordt berekend door de gemeten concentratie van een bepaalde stof te vermenigvuldigen met het ventilatiedebiet. De eenheid van emissie wordt uitgedrukt in massa/tijdseenheid” (zoals kg/uur).\n\n\nConcentratiemeting\nDe concentratie van de stof wordt gemeten met sensoren. Deze worden op bepaalde plekken bij de luchtinlaat en luchtuitlaat van de stal gehangen. Er is een consensus dat de gemeten concentraties dan betrouwbaar en representatief zijn.\n\n\nVentilatiedebiet\n\nMechanisch geventileerde stallen\nIn mechanisch geventileerde stallen wordt het ventilatiedebiet bepaald met behulp van meetwaaiers. Deze meetwaaiers worden op ventilatoren geplaatst en kunnen meten hoeveel lucht er per tijdseenheid door de ventilator wordt geblazen. Omdat mechanisch geventileerde stallen maar één (of enkele) uitstroomopeningen hebben, kan op deze manier worden bepaald wat het totale ventilatiedebiet van een stal is. Er is een consensus dat het bepalen van ventilatiedebiet met behulp van meetwaaiers betrouwbaar en representatief is.\n\n\nNatuurlijk geventileerde stallen\nNatuurlijk geventileerde stallen zijn voornamelijk open, waardoor het niet mogelijk is om met meetwaaiers te bepalen wat het debiet van de stallen is. Daarom wordt bij deze stallen gebruik gemaakt van de CO2 massabalans. Dit is een theoretische benadering gebaseerd op verschillende parameters die door de tijd heen kunnen veranderen.\n\n\n\nEmissieberekening met CO2 massabalans\nDe ratiomethode is een veelgebruikte methode om de emissie van ammoniak (NH3) in stallen te schatten. Deze methode maakt gebruik van de concentratie van CO2 als tracergas, omdat CO2 een relatief constante productie heeft in de stal en goed te berekenen en meten is. De basis van de ratiomethode is het idee dat de verhouding tussen de concentraties van CO2 binnen en buiten de stal een indicatie geeft van het ventilatiedebiet en daarmee de totale emissie van NH3.\nEen randvoorwaarde van de ratiomethode is dat de concentraties van NH3 en het tracergas - in dit geval CO2 - op dezelfde meetpunten en met dezelfde meetfrequentie gemeten moeten worden. Om een goede schatting van de emissie te verkrijgen is het van belang dat de concentratieratio’s per meetpunt worden geschat en daarna een gemiddeld van deze waarden wordt genomen, in plaats dan eerst een gemiddelde concentratie van al die punten te bepalen en daarna de ratiomethode te gebruiken.",
    "crumbs": [
      "Barn Mass Balance"
    ]
  },
  {
    "objectID": "stal_massabalans.html#support-calculations",
    "href": "stal_massabalans.html#support-calculations",
    "title": "Barn Mass Balance",
    "section": "Support calculations",
    "text": "Support calculations\n\nGas density\nThe density of a gas can be calculated using the ideal gas law: \\[\n\\rho = \\frac{M p}{R \\cdot T}\n\\]\nwhere: * \\(M\\) is the molar mass of the gas in kg/mol\n\n\\(p\\) is the pressure in Pascals\n\\(T\\) is the temperature in Kelvin\n\\(R\\) is the universal gas constant\n\n\nsource\n\n\ngas_density\n\n gas_density (P:float, T:float, ppm:float, molweight:float)\n\nCalculates mass density in grams per cubic metre P : pressure in Pa T : temperature in degrees Kelvin ppm : measured parts per million molweight: molecular weight in grams per mole\n\n\n\n\nType\nDetails\n\n\n\n\nP\nfloat\npressure in Pascal\n\n\nT\nfloat\ntemperature in Kelvin\n\n\nppm\nfloat\nmeasured parts per million\n\n\nmolweight\nfloat\nmolecular weight in grams per mole\n\n\n\n\n\nGasconcentraties in de lucht\nConcentraties van chemicaliën in de lucht worden meestal gemeten als de massa van chemicaliën (milligram, microgram, nanogram of picogram) per volume lucht (kubieke meter of kubieke voet). Concentraties kunnen ook worden uitgedrukt als delen per miljoen (ppm) of delen per miljard (ppb) door gebruik te maken van een conversiefactor. Deze conversiefactor is gebaseerd op het moleculair gewicht van de chemische stof en is voor elke chemische stof verschillend. Typisch worden conversies voor chemicaliën in de lucht gemaakt met een veronderstelling van een druk van 1 atmosfeer en een temperatuur van 25 graden Celsius. Voor deze omstandigheden is de vergelijking om te converteren van concentratie in delen per miljoen naar concentratie in milligram per kubieke meter (mg/m3) als volgt:\n\\[  \\text{Concentratie (mg/m3)} = 0.0409    \\times  \\text{concentratie (ppm)}   \\times  \\text{moleculair gewicht}\\]\n\nConcentrations of chemicals\nConcentrations of chemicals in the air are usually measured as the mass of chemicals (milligrams, micrograms, nanograms or picograms) per volume of air (cubic meters or cubic feet). Concentrations can also be expressed as parts per million (ppm) or parts per billion (ppb) by using a conversion factor. This conversion factor is based on the molecular weight of the chemical and it is different for every chemical. The temperature of the atmosphere also has an influence on the calculation.\nTypically, conversions for chemicals in air are made as suming a pressure of 1 atmosphere and a temperature of 25 degrees Celsius. For these conditions, the equation to convert from concentration in parts per million to con centration in milligrams per cubic meter (mg/m3) is as follows: \\[\n\\text{Concentration (mg/m3)} = 0.0409 \\times \\text{concentration (ppm)} \\times \\text{molecular weight}\n\\]\n\n\nFunctie implementatie\n\nsource\n\n\n\ngas_density_from_sensor_measurment\n\n gas_density_from_sensor_measurment (ppm:float, molweight:float)\n\nCalculates mass density in milligrams per cubic metre\n\n\n\n\nType\nDetails\n\n\n\n\nppm\nfloat\nmeasured parts per million\n\n\nmolweight\nfloat\nmolecular weight in grams per mole\n\n\n\n\n\nCO2 productie\nDe CO2 productie in een stal (in m3 / uur) kan worden berekend met behulp van de volgende formules voor melkvee en pinken\n\nMelkvee\n\\[\nP CO_2 = 0.2 \\frac{5.6 m^{0.75} + 22 Y_1 + 1.6 \\times 10^{-5} p^3}{1000}\n\\]\nWhere:\n\n\\(m\\) is the live weight in kg\n\\(Y_1\\) is the daily milk production in kg per dier per dag\n\\(p\\) number of dracht dagen\n\n\nFunctie implementatie\n\nsource\n\n\n\n\nPCO2_melkvee\n\n PCO2_melkvee (aantal, melkproductie, drachtdagen, gewicht)\n\nCO2 productie van melkvee per dier per dag gewicht: (gemiddelde) gewicht van de dieren melkproductie: melkproductie in kg per dier per dag drachtdagen: gemiddelde drachttijd (in dagen) De defaults zijn voor droogstaande koeien\n\n\n\n\nDetails\n\n\n\n\naantal\nnumber of animals\n\n\nmelkproductie\nmilk production in kg per animal per day\n\n\ndrachtdagen\ndays carrying (average)\n\n\ngewicht\naverage weight of the animals in kg\n\n\n\n\n\nCode\ntest_args_melkvee = dict(\n    aantal=130,\n    melkproductie=28,\n    drachtdagen=160,\n    gewicht=650\n)\n\nPCO2_melkvee(**test_args_melkvee)\n\n\nnp.float64(36.46325050213528)\n\n\n\n\nCode\ntest_args_droog = dict(\n    aantal=6,\n    melkproductie=0,\n    drachtdagen=220,\n    gewicht=650\n)\n\nPCO2_melkvee(**test_args_droog)\n\n\nnp.float64(1.0695176539447053)\n\n\n\nPinken\n\\[\nP CO_2 = 0.2 \\frac{7.64 m^{0.69} + Y_2 (\\frac{23}{M} - 1) (\\frac{57.27 + 0.302 m}{1 - 0.171 Y_2})  + 1.6 \\times 10^{-5} p^3}{1000}\n\\]\nWhere:\n\n\\(m\\) is the live weight in kg\n\\(M\\) is the energy content of their food in MJ per kg\n\\(Y_2\\) is the daily weight gain in kg per dier per dag\n\\(p\\) number of dracht dagen\n\n\nFunctie implementatie\n\nsource\n\n\n\n\nPCO2_pinken\n\n PCO2_pinken (aantal, energievoeding, drachtdagen, gewicht,\n              gewichtstoename)\n\nCO2 productie van pinken\n\n\n\n\nDetails\n\n\n\n\naantal\nnumber of animals\n\n\nenergievoeding\nenergy feed\n\n\ndrachtdagen\ndays carrying (average)\n\n\ngewicht\naverage weight of the animals in kg\n\n\ngewichtstoename\naverage weight gain of the animals in kg per day\n\n\n\n\n\nCode\ntest_args_pinken = dict(\n    aantal=0,\n    energievoeding=10,\n    drachtdagen=140,\n    gewicht=400,\n    gewichtstoename=0.6\n)\nPCO2_pinken(**test_args_pinken)\n\n\nnp.float64(0.0)\n\n\n\n\nCode\ntest_args_pinken_niet_drachtig = dict(\n    aantal=0,\n    energievoeding=10,\n    drachtdagen=0,\n    gewicht=250,\n    gewichtstoename=0.6\n)\nPCO2_pinken(**test_args_pinken_niet_drachtig)\n\n\nnp.float64(0.0)\n\n\n\nTemperatuur correctie\nTemperatuur heeft invloed op spijsveetering en gedrag en daarmee op de CO2 productie, correctie kan worden toegepast met de volgende formule:\n\\[\nP CO_2 (T) = P CO_2 \\times (1000  + 4 \\times (20 - T_{stal})) / 1000\n\\]\n\nsource\n\n\n\nPCO2_temperatuurcorrectie\n\n PCO2_temperatuurcorrectie (pco2, temperatuur)\n\nBereken temperatuur correctie voor de CO2 productie\n\n\n\n\nDetails\n\n\n\n\npco2\ncalculated CO2 production in cubic meters per hour\n\n\ntemperatuur\ntemperature in the barn in degrees Celsius\n\n\n\n\nsource\n\n\ncalculate_temperatuur_correctie\n\n calculate_temperatuur_correctie (temperatuur)\n\nCalculate temperature correction factor for CO2 production\n\nPcO2 functie categorie mapping\n\n\nCode\ndict(inspect.signature(PCO2_melkvee).parameters)\n\n\n{'aantal': &lt;Parameter \"aantal\"&gt;,\n 'melkproductie': &lt;Parameter \"melkproductie\"&gt;,\n 'drachtdagen': &lt;Parameter \"drachtdagen\"&gt;,\n 'gewicht': &lt;Parameter \"gewicht\"&gt;}\n\n\n\n\nCode\npco2_category_functions_parameters\n\n\n{'melkvee': {'aantal': &lt;Parameter \"aantal\"&gt;,\n  'melkproductie': &lt;Parameter \"melkproductie\"&gt;,\n  'drachtdagen': &lt;Parameter \"drachtdagen\"&gt;,\n  'gewicht': &lt;Parameter \"gewicht\"&gt;},\n 'droogstaande koeien': {'aantal': &lt;Parameter \"aantal\"&gt;,\n  'melkproductie': &lt;Parameter \"melkproductie\"&gt;,\n  'drachtdagen': &lt;Parameter \"drachtdagen\"&gt;,\n  'gewicht': &lt;Parameter \"gewicht\"&gt;},\n 'drachtig jongvee': {'aantal': &lt;Parameter \"aantal\"&gt;,\n  'energievoeding': &lt;Parameter \"energievoeding\"&gt;,\n  'drachtdagen': &lt;Parameter \"drachtdagen\"&gt;,\n  'gewicht': &lt;Parameter \"gewicht\"&gt;,\n  'gewichtstoename': &lt;Parameter \"gewichtstoename\"&gt;},\n 'niet drachtig jongvee': {'aantal': &lt;Parameter \"aantal\"&gt;,\n  'energievoeding': &lt;Parameter \"energievoeding\"&gt;,\n  'drachtdagen': &lt;Parameter \"drachtdagen\"&gt;,\n  'gewicht': &lt;Parameter \"gewicht\"&gt;,\n  'gewichtstoename': &lt;Parameter \"gewichtstoename\"&gt;}}\n\n\n\n\nPCO2 Parameters\nVoor het CO2-productiemodel zijn een aantal productiegegevens nodig. Melkproductie en –samenstelling worden altijd gemeten en gerapporteerd. De andere benodigde parameters (diergewicht, dagen in dracht, en voor jongvee de energiewaarde van het voer en gewichtstoename), worden bij voorkeur op basis van metingen op de bedrijfslocaties vastgesteld. Wanneer deze niet beschikbaar zijn dienen de volgende standaardwaarden voor te worden gebruikt.\n\n\nCode\npd.DataFrame(_default_parameters).set_index('categorie')\n\n\n\n\n\n\n\n\n\ngewicht\ndrachtdagen\nmelkproductie\nenergievoeding\ngewichtstoename\n\n\ncategorie\n\n\n\n\n\n\n\n\n\nmelkvee\n650\n160\nNaN\nNaN\nNaN\n\n\ndroogstaande koeien\n650\n220\n0.0\nNaN\nNaN\n\n\ndrachtig jongvee\n400\n140\nNaN\n10.0\n0.6\n\n\nniet drachtig jongvee\n250\n0\nNaN\n10.0\n0.6\n\n\n\n\n\n\n\n\n\nCode\nprint(json.dumps(default_pco2_parameters, indent=4))\n\n\n{\n    \"melkvee\": {\n        \"gewicht\": 650,\n        \"drachtdagen\": 160\n    },\n    \"droogstaande koeien\": {\n        \"gewicht\": 650,\n        \"drachtdagen\": 220,\n        \"melkproductie\": 0\n    },\n    \"drachtig jongvee\": {\n        \"gewicht\": 400,\n        \"drachtdagen\": 140,\n        \"energievoeding\": 10.0,\n        \"gewichtstoename\": 0.6\n    },\n    \"niet drachtig jongvee\": {\n        \"gewicht\": 250,\n        \"drachtdagen\": 0,\n        \"energievoeding\": 10.0,\n        \"gewichtstoename\": 0.6\n    }\n}\n\n\n\nsource\n\n\n\ncreate_pco2_function_mapping_from_parameters\n\n create_pco2_function_mapping_from_parameters (pco2_parameters)\n\nCreate a mapping of category to PCO2 calculation functions\n\nsource\n\n\nPCO2_calculation_from_mapping\n\n PCO2_calculation_from_mapping (mapping, category, aantal, **kwargs)\n\n\n\nTest berekeningen\n\n\nEmissie berekeningen\n\nRatiomethode\nDe ammoniakemissies (Ei; in kg/jaar per dierplaats) worden per meetdag \\(i\\) bepaald op basis van de geschatte CO2 - productie in de stal (PCO2i; in m3 CO2 /uur), en de gemiddelde concentratieratio van CO2 en NH3 als CRi over alle meetpunten m waar CO2 - en NH3 concentraties tegelijkertijd in de stal gemeten zijn:\n\\[\nE_i = PCO_{2i} \\cdot CR_i\n\\]\nVoor \\(CR_i\\)\n\\[\nCR_i = \\frac{1}{m} \\sum_{m} \\frac{(NH_{3})_{im}^{stal} - (\\overline{NH_{3}})_i^{buiten} }{(CO_{2})_{im}^{stal} - (\\overline{CO_{2}})_i^{buiten}  }\n\\]\n\\[\n\\overline{X_{i}^{buiten}} = \\sum_{m} X_{i}^{buiten}\n\\]\nWaarin\n\n\\(X_{im}^{stal}\\)\n\nhet 24-uurs gemiddelde van de concentratie van stof \\(X\\) in stal op meetdag \\(i\\) en op meetpunt \\(m\\)\n\n\\(X_{im}^{buiten}\\)\n\nhet 24-uurs gemiddelde van de concentratie van stof \\(X\\) in de ingaande lucht op meetdag \\(i\\) en op meetpunt \\(m\\)\n\n\\(\\overline{X_{i}^{buiten}}\\)\n\nhet 24-uurs gemiddelde van de concentratie van stof \\(X\\) in de ingaande lucht op meetdag \\(i\\) over alle meetpunten\n\n\n\\[\n\\overline{(NH_{3})}_{i}^{buiten} = \\frac{1}{m} \\sum_{m} (NH_{3})_{i}^{buiten}\n\\]\nand \\[\n\\overline{CO_{2i}}^{buiten} = \\frac{1}{n} \\sum_{k=1}^{n} (CO_{2})_{ik}^{buiten}\n\\]\n\n\nRatiomethode met twee meetpunten\nWanneer er slechts twee meetpunten zijn, een binnen en een buiten, dan vervalt de berekening van de gemiddelden over meetpunten en kan de emissie worden berekend met de vereenvoudiging van \\(CR_i\\):\n\\[\nCR_i = \\frac{(NH_{3})_{i}^{stal} - (NH_{3})_{i}^{buiten} }{(CO_{2})_{i}^{stal} - CO_{2i}^{buiten} }\n\\]\nen\n\\[\nE_i = PCO_{2i} \\cdot CR_i\n\\]\nwordt\n\\[\nE_i = PCO_{2i} \\cdot \\frac{(NH_{3})_{i}^{stal} - (NH_{3})_{i}^{buiten} }{(CO_{2})_{i}^{stal} - CO_{2i}^{buiten} }\n\\]",
    "crumbs": [
      "Barn Mass Balance"
    ]
  },
  {
    "objectID": "stal_massabalans.html#implementatie-ratiomethode",
    "href": "stal_massabalans.html#implementatie-ratiomethode",
    "title": "Barn Mass Balance",
    "section": "Implementatie ratiomethode",
    "text": "Implementatie ratiomethode\nWe verwachten dat de gebruiker de volgende data als timeseries dataframe aanlevert:\n\n\n\n\n\n\n\n\nKolomnaam\nOmschrijving\nEenheid\n\n\n\n\nCO2_stal\nCO2 concentratie in de stal in ppm\nppm\n\n\nCO2_buiten\nCO2 concentratie buiten de stal in ppm\nppm\n\n\nNH3_stal\nNH3 concentratie in de stal in ppm\nppm\n\n\nNH3_buiten\nNH3 concentratie buiten de stal in ppm\nppm\n\n\ntemperatuur\nTemperatuur in de stal in Celcius\n°C\n\n\n\nDaarnaast verwachten we dat de gebruiker de volgende gegevens meegeeft\n\nbezetting\n\naantal dieren in de stal per categorie als dictionary met categorie als key en aantal als value\n\nparameters\n\ndictionary met de parameters voor de verschillende categorieën. Missende waardes voor parameters worden aangevult uit de volgende standaard parameters:\n\n\n\n\nCode\npd.DataFrame(default_pco2_parameters).transpose()\n\n\n\n\n\n\n\n\n\ngewicht\ndrachtdagen\nmelkproductie\nenergievoeding\ngewichtstoename\n\n\n\n\nmelkvee\n650.0\n160.0\nNaN\nNaN\nNaN\n\n\ndroogstaande koeien\n650.0\n220.0\n0.0\nNaN\nNaN\n\n\ndrachtig jongvee\n400.0\n140.0\nNaN\n10.0\n0.6\n\n\nniet drachtig jongvee\n250.0\n0.0\nNaN\n10.0\n0.6\n\n\n\n\n\n\n\n\nExterne data\nData voor verificatie van de implementatie wordt veelal aangeleverd in excel werkboeken. Deze data kan worden ingelezen en aangepast aan onze behoeften.\n\nVERA data\n\n\nCode\nvera_data_filename = os.path.join(os.getcwd(), '..', 'data', 'massabalans', 'Rekenbestand emissie VERA.xlsx')\nvera_dataframe = pd.read_excel(\n    vera_data_filename, \n    sheet_name='Emissions (daily means)', \n    header=3, \n    index_col=7, \n    parse_dates=True\n).drop([\n    ' C1:                  cows &gt;= 70%',\n    'C2:                          Occupation rate &gt;= 90%',\n    'C3:                                                             milk production &gt; 25',\n    ' C1:                  heifers &lt; 30%',\n    'C2:                          Occupation rate &gt;= 80%',\n    'C3:                                                             milk production &gt; 25.1',\n    'C4:                                      urea content in milk &gt; 15',\n    'C5:                            dry cows &lt; 25%'], axis=1\n).dropna(axis=1, how='all')\n\n\n\n\nCode\nvera_dataframe.info()\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nDatetimeIndex: 60 entries, 2011-04-04 to 2012-02-16\nData columns (total 55 columns):\n #   Column                                                 Non-Null Count  Dtype  \n---  ------                                                 --------------  -----  \n 0   Measurement institute                                  60 non-null     object \n 1   Animal Category                                        60 non-null     object \n 2   Housing system                                         60 non-null     object \n 3   Measurement location                                   60 non-null     object \n 4   Measurement period                                     60 non-null     int64  \n 5   Measurement day (in period)                            60 non-null     int64  \n 6   Day in year                                            60 non-null     int64  \n 7   Outside temperature [oC]                               24 non-null     float64\n 8   Outside RH [%]                                         23 non-null     float64\n 9   Inside temperature [oC]                                59 non-null     float64\n 10  Inside RH [%]                                          44 non-null     float64\n 11  Animal places                                          60 non-null     int64  \n 12  Milking cows                                           60 non-null     int64  \n 13  Dry cows                                               60 non-null     int64  \n 14  Heifers (pregnant)                                     60 non-null     int64  \n 15  Heifers (not pregnant)                                 60 non-null     int64  \n 16  Floor type (0: slatted floor; 1: closed floor)         60 non-null     int64  \n 17  Walking area per animal (m2)                           60 non-null     float64\n 18  Grazing (hours per day)                                60 non-null     int64  \n 19  Closed cubicles                                        60 non-null     int64  \n 20  Milk production [kg/animal/day]                        56 non-null     float64\n 21  Milk [% protein]                                       60 non-null     float64\n 22  Milk [% fat]                                           60 non-null     float64\n 23  Urea content in milk [mg/100g]                         56 non-null     float64\n 24  Weight milking cows [kg]                               60 non-null     int64  \n 25  Weight dry cows [kg]                                   60 non-null     int64  \n 26  Weight heifers (pregnant) [kg]                         60 non-null     int64  \n 27  Weight heifers (not pregnant) [kg]                     60 non-null     int64  \n 28  Days in pregnancy (milking cows)                       60 non-null     int64  \n 29  Days in pregnancy (dry cows)                           60 non-null     int64  \n 30  Days in pregnancy (heifers)                            60 non-null     int64  \n 31  Energy value of feed (heifers; MJ/kg dry matter)       60 non-null     int64  \n 32  Weight gain heifers [kg/day]                           60 non-null     float64\n 33  CO2 inside [ppm]                                       60 non-null     int64  \n 34  CO2 outside [ppm]                                      52 non-null     float64\n 35  NH3 inside [mg/m3]                                     33 non-null     float64\n 36  NH3 outside [mg/m3]                                    60 non-null     int64  \n 37  Number of animals                                      60 non-null     int64  \n 38  Dairy cows (milking + dry)                             60 non-null     int64  \n 39  % closed cubicles                                      60 non-null     float64\n 40  Occupation rate (%)                                    60 non-null     float64\n 41  Dairy cows (%)                                         60 non-null     float64\n 42  Heifers vs. dairy cows (%)                             60 non-null     float64\n 43  Dry cows vs. dairy cows (%)                            60 non-null     float64\n 44  Heat production milking cows (hpu)                     56 non-null     float64\n 45  Heat production dry cows (hpu)                         56 non-null     float64\n 46  Heat production heifers (pregnant) (hpu)               60 non-null     float64\n 47  Heat production heifers (not pregnant) (hpu)           60 non-null     float64\n 48  Total heat production (hpu)                            60 non-null     float64\n 49  Total heat production corrected for temperature (hpu)  59 non-null     float64\n 50  Ventilation rate [m3/h]                                51 non-null     float64\n 51  Ventilation rate [m3/h per animal]                     51 non-null     float64\n 52  NH3 Emission [kg/year per animal place]                32 non-null     float64\n 53  Summary                                                32 non-null     float64\n 54  Summary.1                                              32 non-null     float64\ndtypes: float64(28), int64(23), object(4)\nmemory usage: 26.2+ KB\n\n\n\n\n\nExctractie van werkbare data uit gegeven werkboeken\n\nWarmte & CO2 data\n\n\nCode\ndata = vera_dataframe.copy()\ndatacolumns = set(data.columns)\n\n\n\nsource\n\n\n\nfind_production_column_names\n\n find_production_column_names (data:pandas.core.frame.DataFrame)\n\nFind the column names for the co2 production columns in the VERA data\n\n\nCode\nprint(json.dumps(find_production_column_names(vera_dataframe), indent=3))\n\n\n{\n   \"drachtdagen\": [\n      \"Days in pregnancy (heifers)\",\n      \"Days in pregnancy (dry cows)\",\n      \"Days in pregnancy (milking cows)\"\n   ],\n   \"energievoeding\": [\n      \"Energy value of feed (heifers; MJ/kg dry matter)\"\n   ],\n   \"melkproductie\": [\n      \"Milk production [kg/animal/day]\"\n   ],\n   \"gewichtstoename\": [\n      \"Weight gain heifers [kg/day]\"\n   ],\n   \"gewicht\": [\n      \"Weight heifers (pregnant) [kg]\",\n      \"Weight heifers (not pregnant) [kg]\",\n      \"Weight milking cows [kg]\",\n      \"Weight dry cows [kg]\"\n   ],\n   \"remaining_columns\": [\n      \"Dry cows vs. dairy cows (%)\",\n      \"Closed cubicles\",\n      \"NH3 outside [mg/m3]\",\n      \"Summary.1\",\n      \"Day in year\",\n      \"% closed cubicles\",\n      \"Housing system\",\n      \"Animal Category\",\n      \"CO2 outside [ppm]\",\n      \"NH3 Emission [kg/year per animal place]\",\n      \"Animal places\",\n      \"NH3 inside [mg/m3]\",\n      \"Ventilation rate [m3/h]\",\n      \"CO2 inside [ppm]\",\n      \"Dairy cows (milking + dry)\",\n      \"Number of animals\",\n      \"Total heat production corrected for temperature (hpu)\",\n      \"Grazing (hours per day)\",\n      \"Heat production heifers (pregnant) (hpu)\",\n      \"Measurement period\",\n      \"Total heat production (hpu)\",\n      \"Measurement institute\",\n      \"Milk [% protein]\",\n      \"Urea content in milk [mg/100g]\",\n      \"Heifers (not pregnant)\",\n      \"Measurement day (in period)\",\n      \"Occupation rate (%)\",\n      \"Heifers vs. dairy cows (%)\",\n      \"Heat production milking cows (hpu)\",\n      \"Walking area per animal (m2)\",\n      \"Dairy cows (%)\",\n      \"Measurement location\",\n      \"Ventilation rate [m3/h per animal]\",\n      \"Floor type (0: slatted floor; 1: closed floor)\",\n      \"Outside RH [%]\",\n      \"Outside temperature [oC]\",\n      \"Summary\",\n      \"Heat production heifers (not pregnant) (hpu)\",\n      \"Heifers (pregnant)\",\n      \"Milk [% fat]\",\n      \"Dry cows\",\n      \"Inside temperature [oC]\",\n      \"Heat production dry cows (hpu)\",\n      \"Milking cows\",\n      \"Inside RH [%]\"\n   ]\n}\n\n\n\n\nCode\nprint(json.dumps(default_pco2_parameters, indent=4))\n\n\n{\n    \"melkvee\": {\n        \"gewicht\": 650,\n        \"drachtdagen\": 160\n    },\n    \"droogstaande koeien\": {\n        \"gewicht\": 650,\n        \"drachtdagen\": 220,\n        \"melkproductie\": 0\n    },\n    \"drachtig jongvee\": {\n        \"gewicht\": 400,\n        \"drachtdagen\": 140,\n        \"energievoeding\": 10.0,\n        \"gewichtstoename\": 0.6\n    },\n    \"niet drachtig jongvee\": {\n        \"gewicht\": 250,\n        \"drachtdagen\": 0,\n        \"energievoeding\": 10.0,\n        \"gewichtstoename\": 0.6\n    }\n}\n\n\n\nsource\n\n\nextract_production_column_names\n\n extract_production_column_names (data:pandas.core.frame.DataFrame)\n\nExtract column names for the co2 production columns from the DataFrame\n\n\n\n\nType\nDetails\n\n\n\n\ndata\nDataFrame\nDataFrame with measurement data\n\n\nReturns\ndict\n\n\n\n\n\n\nCode\nprint(json.dumps(extract_production_column_names(vera_dataframe), indent=4)) #extract_production_column_names(vera_dataframe)\n\n\n{\n    \"melkvee\": {\n        \"gewicht\": [\n            \"Weight milking cows [kg]\"\n        ],\n        \"drachtdagen\": [\n            \"Days in pregnancy (milking cows)\"\n        ],\n        \"melkproductie\": [\n            \"Milk production [kg/animal/day]\"\n        ],\n        \"aantal\": [\n            \"Milking cows\"\n        ]\n    },\n    \"droogstaande koeien\": {\n        \"gewicht\": [\n            \"Weight dry cows [kg]\"\n        ],\n        \"drachtdagen\": [\n            \"Days in pregnancy (dry cows)\"\n        ],\n        \"aantal\": [\n            \"Dry cows\"\n        ]\n    },\n    \"drachtig jongvee\": {\n        \"gewicht\": [\n            \"Weight heifers (pregnant) [kg]\"\n        ],\n        \"drachtdagen\": [\n            \"Days in pregnancy (heifers)\"\n        ],\n        \"energievoeding\": [\n            \"Energy value of feed (heifers; MJ/kg dry matter)\"\n        ],\n        \"gewichtstoename\": [\n            \"Weight gain heifers [kg/day]\"\n        ],\n        \"aantal\": [\n            \"Heifers (pregnant)\"\n        ]\n    },\n    \"niet drachtig jongvee\": {\n        \"gewicht\": [\n            \"Weight heifers (not pregnant) [kg]\"\n        ],\n        \"energievoeding\": [\n            \"Energy value of feed (heifers; MJ/kg dry matter)\"\n        ],\n        \"gewichtstoename\": [\n            \"Weight gain heifers [kg/day]\"\n        ],\n        \"aantal\": [\n            \"Heifers (not pregnant)\"\n        ]\n    }\n}\n\n\n\n\nCode\nprint(json.dumps(flatten_column_mapping(extract_production_column_names(vera_dataframe)), indent=4))\n\n\n[\n    \"Weight milking cows [kg]\",\n    \"Days in pregnancy (milking cows)\",\n    \"Milk production [kg/animal/day]\",\n    \"Milking cows\",\n    \"Weight dry cows [kg]\",\n    \"Days in pregnancy (dry cows)\",\n    \"Dry cows\",\n    \"Weight heifers (pregnant) [kg]\",\n    \"Days in pregnancy (heifers)\",\n    \"Energy value of feed (heifers; MJ/kg dry matter)\",\n    \"Weight gain heifers [kg/day]\",\n    \"Heifers (pregnant)\",\n    \"Weight heifers (not pregnant) [kg]\",\n    \"Energy value of feed (heifers; MJ/kg dry matter)\",\n    \"Weight gain heifers [kg/day]\",\n    \"Heifers (not pregnant)\"\n]\n\n\n\n\nCode\nvera_dataframe[flatten_column_mapping(extract_production_column_names(vera_dataframe))]\n\n\n\n\n\n\n\n\n\nWeight milking cows [kg]\nDays in pregnancy (milking cows)\nMilk production [kg/animal/day]\nMilking cows\nWeight dry cows [kg]\nDays in pregnancy (dry cows)\nDry cows\nWeight heifers (pregnant) [kg]\nDays in pregnancy (heifers)\nEnergy value of feed (heifers; MJ/kg dry matter)\nWeight gain heifers [kg/day]\nHeifers (pregnant)\nWeight heifers (not pregnant) [kg]\nEnergy value of feed (heifers; MJ/kg dry matter)\nWeight gain heifers [kg/day]\nHeifers (not pregnant)\n\n\nDate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2011-04-04\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2011-04-05\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2011-04-06\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2011-06-06\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2011-06-07\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2011-06-08\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2011-08-02\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2011-08-03\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2011-08-04\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2011-10-06\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2011-10-07\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2011-10-08\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2011-11-24\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2011-11-25\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2011-11-26\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2012-01-24\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2012-01-25\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2012-01-26\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2011-05-11\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2011-07-06\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2011-09-07\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2011-10-26\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2011-12-08\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2012-02-16\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2011-05-03\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2011-06-27\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2011-08-31\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2011-11-02\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2011-12-15\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2012-02-14\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2011-04-12\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2011-06-15\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2011-08-17\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2011-10-12\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2011-12-01\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2012-01-31\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2011-04-04\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2011-04-05\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2011-04-06\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2011-06-06\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2011-06-07\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2011-06-08\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2011-08-02\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2011-08-03\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2011-08-04\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2011-10-06\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2011-10-07\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2011-10-08\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2011-11-24\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2011-11-25\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2011-11-26\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2012-01-24\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2012-01-25\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2012-01-26\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2011-05-11\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2011-07-06\n650\n160\n30.0\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2011-09-07\n650\n160\nNaN\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2011-10-26\n650\n160\nNaN\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2011-12-08\n650\n160\nNaN\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n2012-02-16\n650\n160\nNaN\n110\n650\n220\n13\n400\n140\n10\n0.6\n14\n250\n10\n0.6\n15\n\n\n\n\n\n\n\n\nEmissie data\n\nsource\n\n\n\nfind_emission_column_names\n\n find_emission_column_names (data:pandas.core.frame.DataFrame)\n\nFind column names for NH3, CO2 and temperature from the DataFrame\n\n\nCode\nprint(json.dumps(find_emission_column_names(vera_dataframe), indent=3))\n\n\n{\n   \"nh3\": [\n      \"NH3 inside [mg/m3]\",\n      \"NH3 outside [mg/m3]\",\n      \"NH3 Emission [kg/year per animal place]\"\n   ],\n   \"co2\": [\n      \"CO2 inside [ppm]\",\n      \"CO2 outside [ppm]\"\n   ],\n   \"temp\": [\n      \"Outside temperature [oC]\",\n      \"Inside temperature [oC]\",\n      \"Total heat production corrected for temperature (hpu)\"\n   ],\n   \"rh\": [\n      \"Outside RH [%]\",\n      \"Inside RH [%]\"\n   ],\n   \"wind\": []\n}\n\n\n\nsource\n\n\nextract_emission_column_names\n\n extract_emission_column_names (data:pandas.core.frame.DataFrame)\n\nExtract column names for NH3, CO2 and temperature from the DataFrame\n\n\n\n\nType\nDetails\n\n\n\n\ndata\nDataFrame\nDataFrame with measurement data\n\n\nReturns\ndict\n\n\n\n\n\n\nCode\ncolumn_mapping = extract_emission_column_names(vera_dataframe)\n\n\n\n\nCode\nprint(json.dumps(column_mapping, indent=2)) #extract_column_names(vera_dataframe)\n\n\n{\n  \"binnen\": {\n    \"nh3\": [\n      \"NH3 inside [mg/m3]\"\n    ],\n    \"co2\": [\n      \"CO2 inside [ppm]\"\n    ],\n    \"temp\": [\n      \"Inside temperature [oC]\"\n    ],\n    \"rh\": [\n      \"Inside RH [%]\"\n    ],\n    \"wind\": []\n  },\n  \"buiten\": {\n    \"nh3\": [\n      \"NH3 outside [mg/m3]\"\n    ],\n    \"co2\": [\n      \"CO2 outside [ppm]\"\n    ],\n    \"temp\": [\n      \"Outside temperature [oC]\"\n    ],\n    \"rh\": [\n      \"Outside RH [%]\"\n    ],\n    \"wind\": []\n  }\n}\n\n\n\n\nCode\n[col for loc, measures in column_mapping.items() for measure, cols in measures.items() for col in cols]\n\n\n['NH3 inside [mg/m3]',\n 'CO2 inside [ppm]',\n 'Inside temperature [oC]',\n 'Inside RH [%]',\n 'NH3 outside [mg/m3]',\n 'CO2 outside [ppm]',\n 'Outside temperature [oC]',\n 'Outside RH [%]']\n\n\n\n\nCode\nflatten_column_mapping(column_mapping)\n\n\n['NH3 inside [mg/m3]',\n 'CO2 inside [ppm]',\n 'Inside temperature [oC]',\n 'Inside RH [%]',\n 'NH3 outside [mg/m3]',\n 'CO2 outside [ppm]',\n 'Outside temperature [oC]',\n 'Outside RH [%]']\n\n\n\n\nCode\nvera_dataframe[flatten_column_mapping(column_mapping)]\n\n\n\n\n\n\n\n\n\nNH3 inside [mg/m3]\nCO2 inside [ppm]\nInside temperature [oC]\nInside RH [%]\nNH3 outside [mg/m3]\nCO2 outside [ppm]\nOutside temperature [oC]\nOutside RH [%]\n\n\nDate\n\n\n\n\n\n\n\n\n\n\n\n\n2011-04-04\n3.970204\n1063\n17.9\n72.0\n0\n578.0\n13.5\n76.0\n\n\n2011-04-05\n3.970204\n1062\n17.8\n71.0\n0\n576.0\n13.5\n76.0\n\n\n2011-04-06\n4.039857\n1061\n17.8\n71.0\n0\n571.0\n13.5\n76.0\n\n\n2011-06-06\n3.970204\n1060\n17.8\n70.0\n0\n569.0\n13.5\n76.0\n\n\n2011-06-07\n4.039857\n1059\n17.8\n71.0\n0\n570.0\n13.5\n76.0\n\n\n2011-06-08\n3.970204\n1056\nNaN\nNaN\n0\n568.0\n13.4\n77.0\n\n\n2011-08-02\n3.970204\n1056\n17.7\n72.0\n0\n568.0\n13.4\n77.0\n\n\n2011-08-03\n3.970204\n1056\n17.7\n72.0\n0\n568.0\n13.4\n77.0\n\n\n2011-08-04\n3.970204\n1057\n17.7\n72.0\n0\n565.0\n13.4\n77.0\n\n\n2011-10-06\n4.039857\n1057\n17.7\n72.0\n0\n566.0\n13.4\n77.0\n\n\n2011-10-07\n3.970204\n1054\n17.7\n72.0\n0\n566.0\n13.4\n77.0\n\n\n2011-10-08\n3.970204\n1058\n17.7\n72.0\n0\n565.0\n13.3\n77.0\n\n\n2011-11-24\n3.970204\n1058\n17.7\n73.0\n0\n566.0\n13.3\n77.0\n\n\n2011-11-25\n3.970204\n1051\n17.8\n73.0\n0\n565.0\n13.3\n77.0\n\n\n2011-11-26\n3.970204\n1051\n17.7\n72.0\n0\n561.0\n13.3\n77.0\n\n\n2012-01-24\n3.970204\n1054\n17.7\n72.0\n0\n563.0\n13.3\n77.0\n\n\n2012-01-25\n3.970204\n1059\n17.7\n71.0\n0\n563.0\n13.3\n77.0\n\n\n2012-01-26\n3.970204\n1055\n17.7\n72.0\n0\n565.0\n13.3\n77.0\n\n\n2011-05-11\n3.970204\n1058\n17.7\n72.0\n0\n568.0\n13.3\n77.0\n\n\n2011-07-06\n3.970204\n1058\n17.7\n72.0\n0\n567.0\n13.3\n77.0\n\n\n2011-09-07\n3.970204\n1058\n17.7\n72.0\n0\n569.0\n13.3\n77.0\n\n\n2011-10-26\n3.970204\n1061\n17.7\n73.0\n0\n568.0\n13.2\n77.0\n\n\n2011-12-08\n3.970204\n1058\n17.7\n73.0\n0\n570.0\n13.2\n78.0\n\n\n2012-02-16\n3.970204\n1059\n17.7\n73.0\n0\n574.0\n13.2\nNaN\n\n\n2011-05-03\n3.970204\n1059\n17.7\n72.0\n0\n575.0\nNaN\nNaN\n\n\n2011-06-27\n3.970204\n1061\n17.8\n72.0\n0\n573.0\nNaN\nNaN\n\n\n2011-08-31\n3.970204\n1062\n17.8\n72.0\n0\n574.0\nNaN\nNaN\n\n\n2011-11-02\n3.970204\n1063\n17.8\n71.0\n0\n574.0\nNaN\nNaN\n\n\n2011-12-15\n3.970204\n1063\n17.7\n71.0\n0\n571.0\nNaN\nNaN\n\n\n2012-02-14\n3.970204\n1068\n17.6\n71.0\n0\n570.0\nNaN\nNaN\n\n\n2011-04-12\n3.830898\n1070\n17.6\n71.0\n0\n568.0\nNaN\nNaN\n\n\n2011-06-15\n3.761246\n1069\n17.5\n71.0\n0\n566.0\nNaN\nNaN\n\n\n2011-08-17\n3.691593\n1070\n17.4\n70.0\n0\n565.0\nNaN\nNaN\n\n\n2011-10-12\nNaN\n1069\n17.3\n71.0\n0\n563.0\nNaN\nNaN\n\n\n2011-12-01\nNaN\n1067\n17.3\n71.0\n0\n563.0\nNaN\nNaN\n\n\n2012-01-31\nNaN\n1062\n17.3\n71.0\n0\n561.0\nNaN\nNaN\n\n\n2011-04-04\nNaN\n1059\n17.3\n71.0\n0\n560.0\nNaN\nNaN\n\n\n2011-04-05\nNaN\n1047\n17.2\n72.0\n0\n561.0\nNaN\nNaN\n\n\n2011-04-06\nNaN\n1034\n17.3\n72.0\n0\n558.0\nNaN\nNaN\n\n\n2011-06-06\nNaN\n1027\n17.3\n73.0\n0\n555.0\nNaN\nNaN\n\n\n2011-06-07\nNaN\n1016\n17.4\n73.0\n0\n553.0\nNaN\nNaN\n\n\n2011-06-08\nNaN\n1017\n17.5\n73.0\n0\n555.0\nNaN\nNaN\n\n\n2011-08-02\nNaN\n1017\n17.5\n73.0\n0\n556.0\nNaN\nNaN\n\n\n2011-08-03\nNaN\n1018\n17.6\n73.0\n0\n555.0\nNaN\nNaN\n\n\n2011-08-04\nNaN\n1019\n17.6\n73.0\n0\n554.0\nNaN\nNaN\n\n\n2011-10-06\nNaN\n1026\n17.7\nNaN\n0\n551.0\nNaN\nNaN\n\n\n2011-10-07\nNaN\n1027\n17.7\nNaN\n0\n554.0\nNaN\nNaN\n\n\n2011-10-08\nNaN\n1028\n17.7\nNaN\n0\n553.0\nNaN\nNaN\n\n\n2011-11-24\nNaN\n1030\n17.8\nNaN\n0\n554.0\nNaN\nNaN\n\n\n2011-11-25\nNaN\n1031\n17.8\nNaN\n0\n558.0\nNaN\nNaN\n\n\n2011-11-26\nNaN\n1035\n17.8\nNaN\n0\n559.0\nNaN\nNaN\n\n\n2012-01-24\nNaN\n1045\n17.8\nNaN\n0\n557.0\nNaN\nNaN\n\n\n2012-01-25\nNaN\n1048\n17.7\nNaN\n0\nNaN\nNaN\nNaN\n\n\n2012-01-26\nNaN\n1060\n17.7\nNaN\n0\nNaN\nNaN\nNaN\n\n\n2011-05-11\nNaN\n1066\n17.7\nNaN\n0\nNaN\nNaN\nNaN\n\n\n2011-07-06\nNaN\n1076\n17.7\nNaN\n0\nNaN\nNaN\nNaN\n\n\n2011-09-07\nNaN\n1073\n17.7\nNaN\n0\nNaN\nNaN\nNaN\n\n\n2011-10-26\nNaN\n1079\n17.8\nNaN\n0\nNaN\nNaN\nNaN\n\n\n2011-12-08\nNaN\n1077\n17.7\nNaN\n0\nNaN\nNaN\nNaN\n\n\n2012-02-16\nNaN\n1079\n17.7\nNaN\n0\nNaN\nNaN\nNaN\n\n\n\n\n\n\n\n\n\nOpschonen van data\nEen randvoorwaarde van de ratiomethode is dat de concentraties van NH3 en het tracergas - in dit geval CO2 - op dezelfde meetpunten en met dezelfde meetfrequentie gemeten moeten worden. Om een goede schatting van de emissie te verkrijgen is het van belang dat de concentratieratio’s per meetpunt worden geschat en daarna een gemiddeld van deze waarden wordt genomen, in plaats dan eerst een gemiddelde concentratie van al die punten te bepalen en daarna de ratiomethode te gebruiken.\nWe verwachten dat de metingen van veschillende sensoren komen en op verschillende tijdstippen zijn gedaan. Om te kunnen rekenen moeten rijen volledig gevult zijn. We kunnen dit doen door de data te resamplen op een vast tijdsinterval (bijv. 10 minuten).\n\nsource\n\n\nresample_data\n\n resample_data (data:pandas.core.frame.DataFrame, interval:str,\n                method:str)\n\nResample data to a specified interval and interpolate missing values with the givien method\n\n\n\n\nType\nDetails\n\n\n\n\ndata\nDataFrame\nDataFrame with measurement data\n\n\ninterval\nstr\nresampling interval (e.g. ‘10min’ for 10 minutes )\n\n\nmethod\nstr\nresampling method (e.g. ‘linear’, ‘cubic’ )\n\n\nReturns\nDataFrame\n\n\n\n\n\n\nCO2 productie\n\n\nCode\nextract_production_column_names(vera_dataframe)\n\n\n{'melkvee': {'gewicht': ['Weight milking cows [kg]'],\n  'drachtdagen': ['Days in pregnancy (milking cows)'],\n  'melkproductie': ['Milk production [kg/animal/day]'],\n  'aantal': ['Milking cows']},\n 'droogstaande koeien': {'gewicht': ['Weight dry cows [kg]'],\n  'drachtdagen': ['Days in pregnancy (dry cows)'],\n  'aantal': ['Dry cows']},\n 'drachtig jongvee': {'gewicht': ['Weight heifers (pregnant) [kg]'],\n  'drachtdagen': ['Days in pregnancy (heifers)'],\n  'energievoeding': ['Energy value of feed (heifers; MJ/kg dry matter)'],\n  'gewichtstoename': ['Weight gain heifers [kg/day]'],\n  'aantal': ['Heifers (pregnant)']},\n 'niet drachtig jongvee': {'gewicht': ['Weight heifers (not pregnant) [kg]'],\n  'energievoeding': ['Energy value of feed (heifers; MJ/kg dry matter)'],\n  'gewichtstoename': ['Weight gain heifers [kg/day]'],\n  'aantal': ['Heifers (not pregnant)']}}\n\n\n\n\nCode\nfor category, params in pco2_category_functions_parameters.items():\n    print(f\"Category: {category}\")\n    for param, param_info in params.items():\n        print(f\"  Parameter: {param}, Type: {param_info.annotation}, Default: {param_info.default}\")\n\n\nCategory: melkvee\n  Parameter: aantal, Type: &lt;class 'inspect._empty'&gt;, Default: &lt;class 'inspect._empty'&gt;\n  Parameter: melkproductie, Type: &lt;class 'inspect._empty'&gt;, Default: &lt;class 'inspect._empty'&gt;\n  Parameter: drachtdagen, Type: &lt;class 'inspect._empty'&gt;, Default: &lt;class 'inspect._empty'&gt;\n  Parameter: gewicht, Type: &lt;class 'inspect._empty'&gt;, Default: &lt;class 'inspect._empty'&gt;\nCategory: droogstaande koeien\n  Parameter: aantal, Type: &lt;class 'inspect._empty'&gt;, Default: &lt;class 'inspect._empty'&gt;\n  Parameter: melkproductie, Type: &lt;class 'inspect._empty'&gt;, Default: &lt;class 'inspect._empty'&gt;\n  Parameter: drachtdagen, Type: &lt;class 'inspect._empty'&gt;, Default: &lt;class 'inspect._empty'&gt;\n  Parameter: gewicht, Type: &lt;class 'inspect._empty'&gt;, Default: &lt;class 'inspect._empty'&gt;\nCategory: drachtig jongvee\n  Parameter: aantal, Type: &lt;class 'inspect._empty'&gt;, Default: &lt;class 'inspect._empty'&gt;\n  Parameter: energievoeding, Type: &lt;class 'inspect._empty'&gt;, Default: &lt;class 'inspect._empty'&gt;\n  Parameter: drachtdagen, Type: &lt;class 'inspect._empty'&gt;, Default: &lt;class 'inspect._empty'&gt;\n  Parameter: gewicht, Type: &lt;class 'inspect._empty'&gt;, Default: &lt;class 'inspect._empty'&gt;\n  Parameter: gewichtstoename, Type: &lt;class 'inspect._empty'&gt;, Default: &lt;class 'inspect._empty'&gt;\nCategory: niet drachtig jongvee\n  Parameter: aantal, Type: &lt;class 'inspect._empty'&gt;, Default: &lt;class 'inspect._empty'&gt;\n  Parameter: energievoeding, Type: &lt;class 'inspect._empty'&gt;, Default: &lt;class 'inspect._empty'&gt;\n  Parameter: drachtdagen, Type: &lt;class 'inspect._empty'&gt;, Default: &lt;class 'inspect._empty'&gt;\n  Parameter: gewicht, Type: &lt;class 'inspect._empty'&gt;, Default: &lt;class 'inspect._empty'&gt;\n  Parameter: gewichtstoename, Type: &lt;class 'inspect._empty'&gt;, Default: &lt;class 'inspect._empty'&gt;\n\n\n\n\nCode\ndefault_pco2_parameters\n\n\n{'melkvee': {'gewicht': 650, 'drachtdagen': 160},\n 'droogstaande koeien': {'gewicht': 650,\n  'drachtdagen': 220,\n  'melkproductie': 0},\n 'drachtig jongvee': {'gewicht': 400,\n  'drachtdagen': 140,\n  'energievoeding': 10.0,\n  'gewichtstoename': 0.6},\n 'niet drachtig jongvee': {'gewicht': 250,\n  'drachtdagen': 0,\n  'energievoeding': 10.0,\n  'gewichtstoename': 0.6}}\n\n\n\nsource\n\n\ncalculate_pco2_production_from_data\n\n calculate_pco2_production_from_data (data:pandas.core.frame.DataFrame,\n                                      pco2_parameters={'melkvee':\n                                      {'gewicht': 650, 'drachtdagen':\n                                      160}, 'droogstaande koeien':\n                                      {'gewicht': 650, 'drachtdagen': 220,\n                                      'melkproductie': 0}, 'drachtig\n                                      jongvee': {'gewicht': 400,\n                                      'drachtdagen': 140,\n                                      'energievoeding': 10.0,\n                                      'gewichtstoename': 0.6}, 'niet\n                                      drachtig jongvee': {'gewicht': 250,\n                                      'drachtdagen': 0, 'energievoeding':\n                                      10.0, 'gewichtstoename': 0.6}})\n\n\n\nCode\ncalculate_pco2_production_from_data(vera_dataframe)\n\n\n\n\n\n\n\n\n\nPCO2_melkvee\nPCO2_droogstaande koeien\nPCO2_drachtig jongvee\nPCO2_niet drachtig jongvee\n\n\nDate\n\n\n\n\n\n\n\n\n2011-04-04\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2011-04-05\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2011-04-06\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2011-06-06\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2011-06-07\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2011-06-08\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2011-08-02\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2011-08-03\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2011-08-04\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2011-10-06\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2011-10-07\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2011-10-08\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2011-11-24\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2011-11-25\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2011-11-26\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2012-01-24\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2012-01-25\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2012-01-26\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2011-05-11\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2011-07-06\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2011-09-07\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2011-10-26\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2011-12-08\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2012-02-16\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2011-05-03\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2011-06-27\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2011-08-31\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2011-11-02\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2011-12-15\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2012-02-14\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2011-04-12\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2011-06-15\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2011-08-17\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2011-10-12\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2011-12-01\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2012-01-31\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2011-04-04\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2011-04-05\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2011-04-06\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2011-06-06\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2011-06-07\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2011-06-08\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2011-08-02\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2011-08-03\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2011-08-04\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2011-10-06\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2011-10-07\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2011-10-08\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2011-11-24\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2011-11-25\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2011-11-26\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2012-01-24\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2012-01-25\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2012-01-26\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2011-05-11\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2011-07-06\n31.82152\n2.317288\n1.891889\n1.380852\n\n\n2011-09-07\nNaN\n2.317288\n1.891889\n1.380852\n\n\n2011-10-26\nNaN\n2.317288\n1.891889\n1.380852\n\n\n2011-12-08\nNaN\n2.317288\n1.891889\n1.380852\n\n\n2012-02-16\nNaN\n2.317288\n1.891889\n1.380852\n\n\n\n\n\n\n\n\n\nCode\nvera_dataframe.info()\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nDatetimeIndex: 60 entries, 2011-04-04 to 2012-02-16\nData columns (total 55 columns):\n #   Column                                                 Non-Null Count  Dtype  \n---  ------                                                 --------------  -----  \n 0   Measurement institute                                  60 non-null     object \n 1   Animal Category                                        60 non-null     object \n 2   Housing system                                         60 non-null     object \n 3   Measurement location                                   60 non-null     object \n 4   Measurement period                                     60 non-null     int64  \n 5   Measurement day (in period)                            60 non-null     int64  \n 6   Day in year                                            60 non-null     int64  \n 7   Outside temperature [oC]                               24 non-null     float64\n 8   Outside RH [%]                                         23 non-null     float64\n 9   Inside temperature [oC]                                59 non-null     float64\n 10  Inside RH [%]                                          44 non-null     float64\n 11  Animal places                                          60 non-null     int64  \n 12  Milking cows                                           60 non-null     int64  \n 13  Dry cows                                               60 non-null     int64  \n 14  Heifers (pregnant)                                     60 non-null     int64  \n 15  Heifers (not pregnant)                                 60 non-null     int64  \n 16  Floor type (0: slatted floor; 1: closed floor)         60 non-null     int64  \n 17  Walking area per animal (m2)                           60 non-null     float64\n 18  Grazing (hours per day)                                60 non-null     int64  \n 19  Closed cubicles                                        60 non-null     int64  \n 20  Milk production [kg/animal/day]                        56 non-null     float64\n 21  Milk [% protein]                                       60 non-null     float64\n 22  Milk [% fat]                                           60 non-null     float64\n 23  Urea content in milk [mg/100g]                         56 non-null     float64\n 24  Weight milking cows [kg]                               60 non-null     int64  \n 25  Weight dry cows [kg]                                   60 non-null     int64  \n 26  Weight heifers (pregnant) [kg]                         60 non-null     int64  \n 27  Weight heifers (not pregnant) [kg]                     60 non-null     int64  \n 28  Days in pregnancy (milking cows)                       60 non-null     int64  \n 29  Days in pregnancy (dry cows)                           60 non-null     int64  \n 30  Days in pregnancy (heifers)                            60 non-null     int64  \n 31  Energy value of feed (heifers; MJ/kg dry matter)       60 non-null     int64  \n 32  Weight gain heifers [kg/day]                           60 non-null     float64\n 33  CO2 inside [ppm]                                       60 non-null     int64  \n 34  CO2 outside [ppm]                                      52 non-null     float64\n 35  NH3 inside [mg/m3]                                     33 non-null     float64\n 36  NH3 outside [mg/m3]                                    60 non-null     int64  \n 37  Number of animals                                      60 non-null     int64  \n 38  Dairy cows (milking + dry)                             60 non-null     int64  \n 39  % closed cubicles                                      60 non-null     float64\n 40  Occupation rate (%)                                    60 non-null     float64\n 41  Dairy cows (%)                                         60 non-null     float64\n 42  Heifers vs. dairy cows (%)                             60 non-null     float64\n 43  Dry cows vs. dairy cows (%)                            60 non-null     float64\n 44  Heat production milking cows (hpu)                     56 non-null     float64\n 45  Heat production dry cows (hpu)                         56 non-null     float64\n 46  Heat production heifers (pregnant) (hpu)               60 non-null     float64\n 47  Heat production heifers (not pregnant) (hpu)           60 non-null     float64\n 48  Total heat production (hpu)                            60 non-null     float64\n 49  Total heat production corrected for temperature (hpu)  59 non-null     float64\n 50  Ventilation rate [m3/h]                                51 non-null     float64\n 51  Ventilation rate [m3/h per animal]                     51 non-null     float64\n 52  NH3 Emission [kg/year per animal place]                32 non-null     float64\n 53  Summary                                                32 non-null     float64\n 54  Summary.1                                              32 non-null     float64\ndtypes: float64(28), int64(23), object(4)\nmemory usage: 26.2+ KB\n\n\n\n\nEmissie ratio\n\nsource\n\n\ncalculate_emission_ratio\n\n calculate_emission_ratio (NH3_stal, NH3_buiten, CO2_stal, CO2_buiten)\n\nCalculate the emission ratio\n\n\n\n\nDetails\n\n\n\n\nNH3_stal\nNH3 concentration in the barn in mg/m3\n\n\nNH3_buiten\nNH3 concentration outside in mg/m3\n\n\nCO2_stal\nCO2 concentration in the barn in ppm\n\n\nCO2_buiten\nCO2 concentration outside in ppm\n\n\n\nWith ratios calculated we can calculate the NH3 emission.\n\n\nUiteindelijke berekenening module\n\n\nCode\ncolumnmapping = extract_emission_column_names(vera_dataframe)\ntemperatuur = data[columnmapping['binnen']['temp']].mean(axis=1)\ntemperatuur\n\n\nDate\n2011-04-04    17.9\n2011-04-05    17.8\n2011-04-06    17.8\n2011-06-06    17.8\n2011-06-07    17.8\n2011-06-08     NaN\n2011-08-02    17.7\n2011-08-03    17.7\n2011-08-04    17.7\n2011-10-06    17.7\n2011-10-07    17.7\n2011-10-08    17.7\n2011-11-24    17.7\n2011-11-25    17.8\n2011-11-26    17.7\n2012-01-24    17.7\n2012-01-25    17.7\n2012-01-26    17.7\n2011-05-11    17.7\n2011-07-06    17.7\n2011-09-07    17.7\n2011-10-26    17.7\n2011-12-08    17.7\n2012-02-16    17.7\n2011-05-03    17.7\n2011-06-27    17.8\n2011-08-31    17.8\n2011-11-02    17.8\n2011-12-15    17.7\n2012-02-14    17.6\n2011-04-12    17.6\n2011-06-15    17.5\n2011-08-17    17.4\n2011-10-12    17.3\n2011-12-01    17.3\n2012-01-31    17.3\n2011-04-04    17.3\n2011-04-05    17.2\n2011-04-06    17.3\n2011-06-06    17.3\n2011-06-07    17.4\n2011-06-08    17.5\n2011-08-02    17.5\n2011-08-03    17.6\n2011-08-04    17.6\n2011-10-06    17.7\n2011-10-07    17.7\n2011-10-08    17.7\n2011-11-24    17.8\n2011-11-25    17.8\n2011-11-26    17.8\n2012-01-24    17.8\n2012-01-25    17.7\n2012-01-26    17.7\n2011-05-11    17.7\n2011-07-06    17.7\n2011-09-07    17.7\n2011-10-26    17.8\n2011-12-08    17.7\n2012-02-16    17.7\ndtype: float64\n\n\n\n\nCode\npco2_calculated =     calculate_pco2_production_from_data(data)\npco2_calculated.sum(axis=1).rename('PCO2 totaal')\n\n\nDate\n2011-04-04    37.411548\n2011-04-05    37.411548\n2011-04-06    37.411548\n2011-06-06    37.411548\n2011-06-07    37.411548\n2011-06-08    37.411548\n2011-08-02    37.411548\n2011-08-03    37.411548\n2011-08-04    37.411548\n2011-10-06    37.411548\n2011-10-07    37.411548\n2011-10-08    37.411548\n2011-11-24    37.411548\n2011-11-25    37.411548\n2011-11-26    37.411548\n2012-01-24    37.411548\n2012-01-25    37.411548\n2012-01-26    37.411548\n2011-05-11    37.411548\n2011-07-06    37.411548\n2011-09-07    37.411548\n2011-10-26    37.411548\n2011-12-08    37.411548\n2012-02-16    37.411548\n2011-05-03    37.411548\n2011-06-27    37.411548\n2011-08-31    37.411548\n2011-11-02    37.411548\n2011-12-15    37.411548\n2012-02-14    37.411548\n2011-04-12    37.411548\n2011-06-15    37.411548\n2011-08-17    37.411548\n2011-10-12    37.411548\n2011-12-01    37.411548\n2012-01-31    37.411548\n2011-04-04    37.411548\n2011-04-05    37.411548\n2011-04-06    37.411548\n2011-06-06    37.411548\n2011-06-07    37.411548\n2011-06-08    37.411548\n2011-08-02    37.411548\n2011-08-03    37.411548\n2011-08-04    37.411548\n2011-10-06    37.411548\n2011-10-07    37.411548\n2011-10-08    37.411548\n2011-11-24    37.411548\n2011-11-25    37.411548\n2011-11-26    37.411548\n2012-01-24    37.411548\n2012-01-25    37.411548\n2012-01-26    37.411548\n2011-05-11    37.411548\n2011-07-06    37.411548\n2011-09-07     5.590028\n2011-10-26     5.590028\n2011-12-08     5.590028\n2012-02-16     5.590028\nName: PCO2 totaal, dtype: float64\n\n\n\n\nCode\npco2_calculated.sum(axis=1).rename('PCO2 totaal') * 5\n\n\nDate\n2011-04-04    187.057740\n2011-04-05    187.057740\n2011-04-06    187.057740\n2011-06-06    187.057740\n2011-06-07    187.057740\n2011-06-08    187.057740\n2011-08-02    187.057740\n2011-08-03    187.057740\n2011-08-04    187.057740\n2011-10-06    187.057740\n2011-10-07    187.057740\n2011-10-08    187.057740\n2011-11-24    187.057740\n2011-11-25    187.057740\n2011-11-26    187.057740\n2012-01-24    187.057740\n2012-01-25    187.057740\n2012-01-26    187.057740\n2011-05-11    187.057740\n2011-07-06    187.057740\n2011-09-07    187.057740\n2011-10-26    187.057740\n2011-12-08    187.057740\n2012-02-16    187.057740\n2011-05-03    187.057740\n2011-06-27    187.057740\n2011-08-31    187.057740\n2011-11-02    187.057740\n2011-12-15    187.057740\n2012-02-14    187.057740\n2011-04-12    187.057740\n2011-06-15    187.057740\n2011-08-17    187.057740\n2011-10-12    187.057740\n2011-12-01    187.057740\n2012-01-31    187.057740\n2011-04-04    187.057740\n2011-04-05    187.057740\n2011-04-06    187.057740\n2011-06-06    187.057740\n2011-06-07    187.057740\n2011-06-08    187.057740\n2011-08-02    187.057740\n2011-08-03    187.057740\n2011-08-04    187.057740\n2011-10-06    187.057740\n2011-10-07    187.057740\n2011-10-08    187.057740\n2011-11-24    187.057740\n2011-11-25    187.057740\n2011-11-26    187.057740\n2012-01-24    187.057740\n2012-01-25    187.057740\n2012-01-26    187.057740\n2011-05-11    187.057740\n2011-07-06    187.057740\n2011-09-07     27.950142\n2011-10-26     27.950142\n2011-12-08     27.950142\n2012-02-16     27.950142\nName: PCO2 totaal, dtype: float64\n\n\n\n\nCode\npco2_corrected = pd.concat([calculate_temperatuur_correctie(temperatuur).rename('temperatuur_correctie') , pco2_calculated.sum(axis=1).rename('PCO2_totaal')], axis=1)\n\n\n\n\nCode\npco2_corrected\n\n\n\n\n\n\n\n\n\ntemperatuur_correctie\nPCO2_totaal\n\n\nDate\n\n\n\n\n\n\n2011-04-04\n1.0084\n37.411548\n\n\n2011-04-05\n1.0088\n37.411548\n\n\n2011-04-06\n1.0088\n37.411548\n\n\n2011-06-06\n1.0088\n37.411548\n\n\n2011-06-07\n1.0088\n37.411548\n\n\n2011-06-08\nNaN\n37.411548\n\n\n2011-08-02\n1.0092\n37.411548\n\n\n2011-08-03\n1.0092\n37.411548\n\n\n2011-08-04\n1.0092\n37.411548\n\n\n2011-10-06\n1.0092\n37.411548\n\n\n2011-10-07\n1.0092\n37.411548\n\n\n2011-10-08\n1.0092\n37.411548\n\n\n2011-11-24\n1.0092\n37.411548\n\n\n2011-11-25\n1.0088\n37.411548\n\n\n2011-11-26\n1.0092\n37.411548\n\n\n2012-01-24\n1.0092\n37.411548\n\n\n2012-01-25\n1.0092\n37.411548\n\n\n2012-01-26\n1.0092\n37.411548\n\n\n2011-05-11\n1.0092\n37.411548\n\n\n2011-07-06\n1.0092\n37.411548\n\n\n2011-09-07\n1.0092\n37.411548\n\n\n2011-10-26\n1.0092\n37.411548\n\n\n2011-12-08\n1.0092\n37.411548\n\n\n2012-02-16\n1.0092\n37.411548\n\n\n2011-05-03\n1.0092\n37.411548\n\n\n2011-06-27\n1.0088\n37.411548\n\n\n2011-08-31\n1.0088\n37.411548\n\n\n2011-11-02\n1.0088\n37.411548\n\n\n2011-12-15\n1.0092\n37.411548\n\n\n2012-02-14\n1.0096\n37.411548\n\n\n2011-04-12\n1.0096\n37.411548\n\n\n2011-06-15\n1.0100\n37.411548\n\n\n2011-08-17\n1.0104\n37.411548\n\n\n2011-10-12\n1.0108\n37.411548\n\n\n2011-12-01\n1.0108\n37.411548\n\n\n2012-01-31\n1.0108\n37.411548\n\n\n2011-04-04\n1.0108\n37.411548\n\n\n2011-04-05\n1.0112\n37.411548\n\n\n2011-04-06\n1.0108\n37.411548\n\n\n2011-06-06\n1.0108\n37.411548\n\n\n2011-06-07\n1.0104\n37.411548\n\n\n2011-06-08\n1.0100\n37.411548\n\n\n2011-08-02\n1.0100\n37.411548\n\n\n2011-08-03\n1.0096\n37.411548\n\n\n2011-08-04\n1.0096\n37.411548\n\n\n2011-10-06\n1.0092\n37.411548\n\n\n2011-10-07\n1.0092\n37.411548\n\n\n2011-10-08\n1.0092\n37.411548\n\n\n2011-11-24\n1.0088\n37.411548\n\n\n2011-11-25\n1.0088\n37.411548\n\n\n2011-11-26\n1.0088\n37.411548\n\n\n2012-01-24\n1.0088\n37.411548\n\n\n2012-01-25\n1.0092\n37.411548\n\n\n2012-01-26\n1.0092\n37.411548\n\n\n2011-05-11\n1.0092\n37.411548\n\n\n2011-07-06\n1.0092\n37.411548\n\n\n2011-09-07\n1.0092\n5.590028\n\n\n2011-10-26\n1.0088\n5.590028\n\n\n2011-12-08\n1.0092\n5.590028\n\n\n2012-02-16\n1.0092\n5.590028\n\n\n\n\n\n\n\n\n\nCode\npco2_corrected['PCO2_corrected'] = pco2_corrected['PCO2_totaal'] * pco2_corrected['temperatuur_correctie']\n\n\nLet op, bij berekening volgens Wagenngen is er een factor 0.2 in de CO2 productie die door de werkboeken pas wordt toegepat bij de debiet berekening.\n\n\nCode\npco2_corrected['PCO2_corrected'] * 5\n\n\nDate\n2011-04-04    188.629025\n2011-04-05    188.703848\n2011-04-06    188.703848\n2011-06-06    188.703848\n2011-06-07    188.703848\n2011-06-08           NaN\n2011-08-02    188.778671\n2011-08-03    188.778671\n2011-08-04    188.778671\n2011-10-06    188.778671\n2011-10-07    188.778671\n2011-10-08    188.778671\n2011-11-24    188.778671\n2011-11-25    188.703848\n2011-11-26    188.778671\n2012-01-24    188.778671\n2012-01-25    188.778671\n2012-01-26    188.778671\n2011-05-11    188.778671\n2011-07-06    188.778671\n2011-09-07    188.778671\n2011-10-26    188.778671\n2011-12-08    188.778671\n2012-02-16    188.778671\n2011-05-03    188.778671\n2011-06-27    188.703848\n2011-08-31    188.703848\n2011-11-02    188.703848\n2011-12-15    188.778671\n2012-02-14    188.853494\n2011-04-12    188.853494\n2011-06-15    188.928317\n2011-08-17    189.003141\n2011-10-12    189.077964\n2011-12-01    189.077964\n2012-01-31    189.077964\n2011-04-04    189.077964\n2011-04-05    189.152787\n2011-04-06    189.077964\n2011-06-06    189.077964\n2011-06-07    189.003141\n2011-06-08    188.928317\n2011-08-02    188.928317\n2011-08-03    188.853494\n2011-08-04    188.853494\n2011-10-06    188.778671\n2011-10-07    188.778671\n2011-10-08    188.778671\n2011-11-24    188.703848\n2011-11-25    188.703848\n2011-11-26    188.703848\n2012-01-24    188.703848\n2012-01-25    188.778671\n2012-01-26    188.778671\n2011-05-11    188.778671\n2011-07-06    188.778671\n2011-09-07     28.207283\n2011-10-26     28.196103\n2011-12-08     28.207283\n2012-02-16     28.207283\nName: PCO2_corrected, dtype: float64\n\n\n\n\nCode\nnh3_binnen = data[columnmapping['binnen']['nh3']].mean(axis=1).rename('nh3_binnen')\nnh3_buiten = data[columnmapping['buiten']['nh3']].min(axis=1).rename('nh3_buiten')\nco2_binnen = data[columnmapping['binnen']['co2']].mean(axis=1).rename('co2_binnen')\nco2_buiten = data[columnmapping['buiten']['co2']].min(axis=1).rename('co2_buiten')\n\n\n\n\nCode\nnh3_binnen\n\n\nDate\n2011-04-04    3.970204\n2011-04-05    3.970204\n2011-04-06    4.039857\n2011-06-06    3.970204\n2011-06-07    4.039857\n2011-06-08    3.970204\n2011-08-02    3.970204\n2011-08-03    3.970204\n2011-08-04    3.970204\n2011-10-06    4.039857\n2011-10-07    3.970204\n2011-10-08    3.970204\n2011-11-24    3.970204\n2011-11-25    3.970204\n2011-11-26    3.970204\n2012-01-24    3.970204\n2012-01-25    3.970204\n2012-01-26    3.970204\n2011-05-11    3.970204\n2011-07-06    3.970204\n2011-09-07    3.970204\n2011-10-26    3.970204\n2011-12-08    3.970204\n2012-02-16    3.970204\n2011-05-03    3.970204\n2011-06-27    3.970204\n2011-08-31    3.970204\n2011-11-02    3.970204\n2011-12-15    3.970204\n2012-02-14    3.970204\n2011-04-12    3.830898\n2011-06-15    3.761246\n2011-08-17    3.691593\n2011-10-12         NaN\n2011-12-01         NaN\n2012-01-31         NaN\n2011-04-04         NaN\n2011-04-05         NaN\n2011-04-06         NaN\n2011-06-06         NaN\n2011-06-07         NaN\n2011-06-08         NaN\n2011-08-02         NaN\n2011-08-03         NaN\n2011-08-04         NaN\n2011-10-06         NaN\n2011-10-07         NaN\n2011-10-08         NaN\n2011-11-24         NaN\n2011-11-25         NaN\n2011-11-26         NaN\n2012-01-24         NaN\n2012-01-25         NaN\n2012-01-26         NaN\n2011-05-11         NaN\n2011-07-06         NaN\n2011-09-07         NaN\n2011-10-26         NaN\n2011-12-08         NaN\n2012-02-16         NaN\nName: nh3_binnen, dtype: float64\n\n\n\nWe volgen even de werkboeken\nventilatie 1",
    "crumbs": [
      "Barn Mass Balance"
    ]
  },
  {
    "objectID": "stal_massabalans.html#analyse-worksheet-berekeningen",
    "href": "stal_massabalans.html#analyse-worksheet-berekeningen",
    "title": "Barn Mass Balance",
    "section": "Analyse worksheet berekeningen",
    "text": "Analyse worksheet berekeningen\n\nNH3 Emissie berekend [kg/dpl/jaar]\nIF(\n    ISNUMBER(BE4),\n    BE4*(AO4-AP4)/1000000*24*365/(Q4-Y4),\n    \"\"\n)\n\n\\[\nBG_i = BE_i \\times \\frac{ (AO_i - AP_i)}{Q_i - Y_i} \\times \\frac{  24 \\times 365}{1000000}\n\\]\n\n\\(BE_i\\) is Debiet berekend [m3/uur]\n\\(AO_i\\) is NH3 concentratie stal [mg/m3]\n\\(AP_i\\) is NH3 concentratie buiten [mg/m3]\n\\(Y_i\\) is Afgedekte ligboxen\n\\(Q_i\\) is Dierplaatsen\n\n\n\nDebiet berekend [m3/uur]\nIF(\n    OR(\n        BD4=\"\",AM4=\"*\",AM4=\"\"\n    ),\n    IF(\n        ISNUMBER(AQ4),\n        AQ4,\n        \"\"\n    ),\n    BD4*0.2/(0.000001*(AM4-AN4)))\n\\[\nBE_i = BD_i \\times \\frac{0.2}{0.000001 \\times (AM_i - AN_i)}\n\\]\n\n\\(BD_i\\) is Warmteproductie (totaal, gecorrigeerd door temperatuur)\n\\(AM_i\\) is CO2 stal [ppm]\n\\(AN_i\\) is CO2 buiten [ppm]\n\\(AQ_i\\) is Debiet gemeten [m3/uur]\n\nFrom these two equations we can derive:\n\\[\nBG_i = BD_i \\times \\frac{0.2}{0.000001 \\times (AM_i - AN_i)} \\times \\frac{ (AO_i - AP_i)}{Q_i - Y_i} \\times \\frac{  24 \\times 365}{1000000}  \\Leftrightarrow\n\\]\n\\[\nBG_i = BD_i \\times \\frac{0.2}{ (AM_i - AN_i)} \\times \\frac{ (AO_i - AP_i)}{Q_i - Y_i} \\times   24 \\times 365 \\Leftrightarrow\n\\]\n\\[\nBG_i =  0.2 \\times BD_i \\times  \\frac{(AO_i - AP_i)}{ (AM_i - AN_i)} \\times \\frac{ 24 \\times 365}{Q_i - Y_i}   \n\\]\n\\[\nE_i = PCO_{2i} \\cdot \\frac{(NH_{3})_{i}^{stal} - (NH_{3})_{i}^{buiten} }{(CO_{2})_{i}^{stal} - CO_{2i}^{buiten} }\n\\]\n\n\nWarmteproductie (totaal, gecorrigeerd door temperatuur)\nIF(\n    BC4=\"\",\n    \"\",\n    IF(\n        M4=\"*\",\n        BC4,\n        BC4*(1000+4*(20-M4))/1000\n    )\n)\n\\[\nBD_i = BC_i \\times \\frac{1000 + 4 \\times (20 - M_i)}{1000}\n\\]\n\n\\(BC_i\\) is Warmteproductie (totaal)\n\\(M_i\\) is Temperatuur [°C]\n\n\n\nWarmteproductie totaal [W]\n=IF(SUM(AY4:BB4)=0,\"\",SUM(AY4:BB4))\n\\[\nBC_i = \\sum_{j=AY}^{BB} P_j\n\\] * \\(BC_i\\) is Warmteproductie (totaal)\n\n\\(P_j\\) is Warmteproductie categorie (melkvee, droogstaande koeien, drachtig jongvee, niet drachtig jongvee)",
    "crumbs": [
      "Barn Mass Balance"
    ]
  },
  {
    "objectID": "stal_massabalans.html#warmteproductie",
    "href": "stal_massabalans.html#warmteproductie",
    "title": "Barn Mass Balance",
    "section": "Warmteproductie",
    "text": "Warmteproductie\n\nWarmteproductie categorie melkvee\n=IF(\n    OR(R4=\"\",Z4=\"\"),\n    \"\",\n    (5.6*(IF(AD4=\"\",'Input voor PCO2'!$C$5,AD4))^0.75+22*Z4+1.6*0.00001*(IF(AH4=\"\",'Input voor PCO2'!$D$5,AH4))^3)*R4/1000\n)\n\\[\nP_{melkvee} = \\frac{5.6 (AD_i)^{0.75} + 22 Z_i + 1.6 \\times 10^{-5} (AH_i)^3}{1000} \\times R_i\n\\]\nWhere:\n\n\\(AD_i\\) is Gewicht melkvee [kg]\n\\(AH_i\\) is Drachtdagen melkvee [dagen]\n\\(Z_i\\) is Melkproductie melkvee [kg/dag]\n\\(R_i\\) is Aantal melkvee",
    "crumbs": [
      "Barn Mass Balance"
    ]
  },
  {
    "objectID": "stal_massabalans.html#calculatie-vergelijking-met-voorbeeld-data",
    "href": "stal_massabalans.html#calculatie-vergelijking-met-voorbeeld-data",
    "title": "Barn Mass Balance",
    "section": "Calculatie vergelijking met voorbeeld data",
    "text": "Calculatie vergelijking met voorbeeld data\n\nStandaard parameters\n\n\nCode\ntest_parameters ={\n    'melkvee': {\n        'drachtdagen': 160,\n        'gewicht': 650,\n        'melkproductie': 28\n    },\n    'droogstaande koeien': {\n        'drachtdagen': 220,\n        'gewicht': 650,\n        'melkproductie': 28\n    },\n    'drachtig jongvee': {\n        'drachtdagen': 140,\n        'gewicht': 400,\n        'energievoeding': 10.0,\n        'gewichtstoename': 0.6\n    },\n    'niet drachtig jongvee': {\n        'drachtdagen': 0,\n        'gewicht': 250,\n        'energievoeding': 10.0,\n        'gewichtstoename': 0.6\n    }\n}\n\n\n\n\nCode\nbezetting = {\n    'melkvee': dict(aantal=130),\n    'droogstaande koeien': dict(aantal=6),\n    'drachtig jongvee': dict(aantal=0),\n    'niet drachtig jongvee': dict(aantal=0)\n}\n\n\n\n\nParameters importeren\n\n\nCode\ntest_data_filename = os.path.join(os.getcwd(), '..', 'data', 'massabalans', 'Testdata2.xlsx')\nprint(test_data_filename)\n\n\n/home/fenke/repos/openstal/nbs/../data/massabalans/Testdata2.xlsx\n\n\n\n\nCode\ntest_productiegegevens = pd.read_excel(test_data_filename, sheet_name='Bedrijfsproductiegegevens', header=0, index_col=0, parse_dates=True)\n\n\n/tmp/ipykernel_6823/3760343135.py:1: UserWarning: Could not infer format, so each element will be parsed individually, falling back to `dateutil`. To ensure parsing is consistent and as-expected, please specify a format.\n  test_productiegegevens = pd.read_excel(test_data_filename, sheet_name='Bedrijfsproductiegegevens', header=0, index_col=0, parse_dates=True)\n\n\n\n\nCode\ntest_productiegegevens\n\n\n\n\n\n\n\n\n\nWaarde\nNaam parameter in WLR rapport\nNaam parameter in Slimme Stal\nHoe vaak deze waarde verandert\n\n\nParameter\n\n\n\n\n\n\n\n\nAantal dierplaatsen (=aantal ligboxen)\n179.000000\n-\nNaN\nzelden\n\n\nAantal melkgevende koeien\n110.000000\n-\nNaN\nelke 3-7 dagen\n\n\nAantal droogstaande koeien\n13.000000\n-\nNaN\nelke 3-7 dagen\n\n\nAantal drachtige pinken\n14.000000\n-\nNaN\nelke 3-7 dagen\n\n\nAantal niet-drachtig jongvee\n15.000000\n-\nNaN\nelke 3-7 dagen\n\n\nMelkproductie (kg/koe/dag)\n30.000000\nY1\nNaN\nelke 3 dagen\n\n\nUreumgetal (mg/100g)\n16.000000\n-\nNaN\nelke 3 dagen\n\n\nMest mest besmeurd oppervlakte (m2)\n760.000000\n-\nNaN\nzelden\n\n\nAantal ligboxen gesloten\n21.000000\nNaN\nNaN\nzelden\n\n\nGewicht melkkoe (kg)\n650.000000\nm\nNaN\nnooit\n\n\nGewicht droogstaande koe (kg)\n650.000000\nm\nNaN\nnooit\n\n\nGewicht drachtige pink (kg)\n400.000000\nm\nNaN\nnooit\n\n\nGewicht niet-drachtig jongvee (kg)\n250.000000\nm\nNaN\nnooit\n\n\nDagen in dracht melkkoe\n160.000000\np\nNaN\nnooit\n\n\nDagen in dracht droogstaande koe\n220.000000\np\nNaN\nnooit\n\n\nDagen in dracht drachtige pink\n140.000000\np\nNaN\nnooit\n\n\nEnergiewaarde voer drachtige pink (MJ/kg DS)\n10.000000\nM\nNaN\nnooit\n\n\nEnergiewaarde voer niet-drachtig jongevee (MJ/kg DS)\n10.000000\nM\nNaN\nnooit\n\n\nGewichtstoename drachtige pink (kg/dag)\n0.600000\nY2\nNaN\nnooit\n\n\nGewichtstoename niet-drachtig jongvee (kg/dag)\n0.600000\nY2\nNaN\nnooit\n\n\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\nPCO2 berekening\nNaN\nNaN\nNaN\nNaN\n\n\nPCO2 melkvee\n159.107598\nNaN\nNaN\nNaN\n\n\nPCO2 droogstaande koe\n11.586441\nNaN\nNaN\nNaN\n\n\nPCO2 drachtige pink\n9.459443\nNaN\nNaN\nNaN\n\n\nPCO2 niet-drachtig jongee\n6.904258\nNaN\nNaN\nNaN\n\n\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\nPCO2 totaal\n187.057740\nNaN\nNaN\nNaN\n\n\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\nTotaal aantal vee\n152.000000\nNaN\nNaN\nNaN\n\n\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\nAantal ligboxen open\n158.000000\nNaN\nNaN\nNaN\n\n\n\n\n\n\n\n\n\nData importeren\n\n\nCode\ntest_dataframe = pd.read_excel(test_data_filename, sheet_name='Ruwe Data (CARS)', header=1, index_col=0, parse_dates=True)\n\n\n\n\nCode\ntest_dataframe\n\n\n\n\n\n\n\n\n\nNH3 concentratie stal (ppm)\nNH3 concentratie buiten (ppm)\nCO2 concentratie stal (ppm)\nCO2 concentratie buiten1 (ppm)\nCO2 concentratie buiten2 (ppm)\nTemperatuur stal1 ©\nTemperatuur stal2 ©\nTemperatuur buiten1 ©\nTemperatuur buiten2 ©\nLuchtvochtigheid stal1 (%)\n...\nPCO2 correctie\nVentilatiedebiet (m3/u)\nVentilatiedebiet (m3/dier/u)\nNH3 emissie (kg/u)\nNH3 emissie (kg/j)\nNH3 emissie (kg/dp/j)\nVentilatiedebiet (m3/u).1\nNH3 emissie (kg/u).1\nNH3 emissie (kg/j).1\nNH3 emissie (kg/dp/j).1\n\n\nTijd\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2025-07-04 00:00:00\n5.7\n0.0\n1063.0\n578.0\n532.0\n17.9\n20.2\n13.5\n13.7\n72.0\n...\n187.768559\n77430.333781\n509.410091\n0.307414\n2692.948507\n17.043978\n77776.0\n0.35\n3096.66\n19.60\n\n\n2025-07-04 00:01:00\n5.7\n0.0\n1062.0\n576.0\n531.0\n17.8\n20.2\n13.5\n13.7\n71.0\n...\n187.805971\n77286.407805\n508.463209\n0.306843\n2687.942908\n17.012297\n77704.0\n0.36\n3114.52\n19.71\n\n\n2025-07-04 00:02:00\n5.8\n0.0\n1061.0\n571.0\n531.0\n17.8\n20.2\n13.5\n13.7\n71.0\n...\n187.805971\n76655.498353\n504.312489\n0.309677\n2712.772456\n17.169446\n76969.0\n0.36\n3135.86\n19.85\n\n\n2025-07-04 00:03:00\n5.7\n0.0\n1060.0\n569.0\n527.0\n17.8\n20.2\n13.5\n13.7\n70.0\n...\n187.805971\n76499.377176\n503.285376\n0.303718\n2660.570780\n16.839056\n76809.0\n0.35\n3094.28\n19.58\n\n\n2025-07-04 00:04:00\n5.8\n0.0\n1059.0\n570.0\n526.0\n17.8\n20.1\n13.5\n13.7\n71.0\n...\n187.843383\n76827.559310\n505.444469\n0.310372\n2718.861545\n17.207984\n77228.0\n0.36\n3148.07\n19.92\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n2025-08-22 23:55:00\n2.1\n0.0\n611.0\n395.0\n490.0\n16.6\n21.3\n15.0\n14.9\n74.5\n...\n187.843383\n173929.057883\n1144.270118\n0.254407\n2228.607057\n12.450319\n183621.0\n0.30\n2597.60\n15.28\n\n\n2025-08-22 23:56:00\n2.2\n0.0\n607.0\n396.0\n489.0\n16.6\n21.3\n15.0\n14.9\n74.5\n...\n187.843383\n178050.599539\n1171.385523\n0.272838\n2390.056587\n13.352271\n188244.0\n0.31\n2691.75\n15.83\n\n\n2025-08-22 23:57:00\n2.1\n0.0\n603.0\n394.0\n488.0\n16.6\n21.3\n15.0\n14.9\n74.5\n...\n187.843383\n179754.433028\n1182.594954\n0.262928\n2303.249399\n12.867315\n189992.0\n0.30\n2604.49\n15.32\n\n\n2025-08-22 23:58:00\n2.1\n0.0\n600.0\n395.0\n486.0\n16.5\n21.3\n15.0\n14.9\n75.0\n...\n187.880794\n183298.335670\n1205.910103\n0.268112\n2348.658524\n13.120997\n193900.0\n0.31\n2727.22\n16.04\n\n\n2025-08-22 23:59:00\n2.1\n0.0\n599.0\n397.0\n485.0\n16.6\n21.3\n15.0\n14.9\n75.0\n...\n187.843383\n185983.547043\n1223.575967\n0.272039\n2383.064972\n13.313212\n196860.0\n0.31\n2707.79\n15.93\n\n\n\n\n5760 rows × 33 columns\n\n\n\n\n\nCode\ntest_dataframe.info()\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nDatetimeIndex: 60 entries, NaT to NaT\nData columns (total 66 columns):\n #   Column                                                                                  Non-Null Count  Dtype         \n---  ------                                                                                  --------------  -----         \n 0   Measurement institute                                                                   60 non-null     object        \n 1   Animal Category                                                                         60 non-null     object        \n 2   Housing system                                                                          60 non-null     object        \n 3   Measurement location                                                                    60 non-null     object        \n 4   Measurement period                                                                      60 non-null     int64         \n 5   Measurement day (in period)                                                             60 non-null     int64         \n 6   Date                                                                                    60 non-null     datetime64[ns]\n 7   Day in year                                                                             60 non-null     int64         \n 8   Outside temperature [oC]                                                                24 non-null     float64       \n 9   Outside RH [%]                                                                          23 non-null     float64       \n 10  Inside temperature [oC]                                                                 59 non-null     float64       \n 11  Inside RH [%]                                                                           44 non-null     float64       \n 12  Winddirection                                                                           0 non-null      float64       \n 13  Windspeed (10 m height) [m/s]                                                           0 non-null      float64       \n 14  Animal places                                                                           60 non-null     int64         \n 15  Milking cows                                                                            60 non-null     int64         \n 16  Dry cows                                                                                60 non-null     int64         \n 17  Heifers (pregnant)                                                                      60 non-null     int64         \n 18  Heifers (not pregnant)                                                                  60 non-null     int64         \n 19  Floor type (0: slatted floor; 1: closed floor)                                          60 non-null     int64         \n 20  Walking area per animal (m2)                                                            60 non-null     float64       \n 21  Grazing (hours per day)                                                                 60 non-null     int64         \n 22  Closed cubicles                                                                         60 non-null     int64         \n 23  Milk production [kg/animal/day]                                                         56 non-null     float64       \n 24  Milk [% protein]                                                                        60 non-null     float64       \n 25  Milk [% fat]                                                                            60 non-null     float64       \n 26  Urea content in milk [mg/100g]                                                          56 non-null     float64       \n 27  Weight milking cows [kg]                                                                60 non-null     int64         \n 28  Weight dry cows [kg]                                                                    60 non-null     int64         \n 29  Weight heifers (pregnant) [kg]                                                          60 non-null     int64         \n 30  Weight heifers (not pregnant) [kg]                                                      60 non-null     int64         \n 31  Days in pregnancy (milking cows)                                                        60 non-null     int64         \n 32  Days in pregnancy (dry cows)                                                            60 non-null     int64         \n 33  Days in pregnancy (heifers)                                                             60 non-null     int64         \n 34  Energy value of feed (heifers; MJ/kg dry matter)                                        60 non-null     int64         \n 35  Weight gain heifers [kg/day]                                                            60 non-null     float64       \n 36  CO2 inside [ppm]                                                                        60 non-null     int64         \n 37  CO2 outside [ppm]                                                                       52 non-null     float64       \n 38  NH3 inside [mg/m3]                                                                      33 non-null     float64       \n 39  NH3 outside [mg/m3]                                                                     60 non-null     int64         \n 40  Number of animals                                                                       60 non-null     int64         \n 41  Dairy cows (milking + dry)                                                              60 non-null     int64         \n 42  % closed cubicles                                                                       60 non-null     float64       \n 43  Occupation rate (%)                                                                     60 non-null     float64       \n 44  Dairy cows (%)                                                                          60 non-null     float64       \n 45  Heifers vs. dairy cows (%)                                                              60 non-null     float64       \n 46  Dry cows vs. dairy cows (%)                                                             60 non-null     float64       \n 47  Heat production milking cows (hpu)                                                      56 non-null     float64       \n 48  Heat production dry cows (hpu)                                                          56 non-null     float64       \n 49  Heat production heifers (pregnant) (hpu)                                                60 non-null     float64       \n 50  Heat production heifers (not pregnant) (hpu)                                            60 non-null     float64       \n 51  Total heat production (hpu)                                                             60 non-null     float64       \n 52  Total heat production corrected for temperature (hpu)                                   59 non-null     float64       \n 53  Ventilation rate [m3/h]                                                                 51 non-null     float64       \n 54  Ventilation rate [m3/h per animal]                                                      51 non-null     float64       \n 55  NH3 Emission [kg/year per animal place]                                                 32 non-null     float64       \n 56   C1:                  cows &gt;= 70%                                                       32 non-null     float64       \n 57  C2:                          Occupation rate &gt;= 90%                                     32 non-null     float64       \n 58  C3:                                                             milk production &gt; 25    32 non-null     float64       \n 59  Summary                                                                                 32 non-null     float64       \n 60   C1:                  heifers &lt; 30%                                                     32 non-null     float64       \n 61  C2:                          Occupation rate &gt;= 80%                                     32 non-null     float64       \n 62  C3:                                                             milk production &gt; 25.1  32 non-null     float64       \n 63  C4:                                      urea content in milk &gt; 15                      32 non-null     float64       \n 64  C5:                            dry cows &lt; 25%                                           32 non-null     float64       \n 65  Summary.1                                                                               32 non-null     float64       \ndtypes: datetime64[ns](1), float64(38), int64(23), object(4)\nmemory usage: 31.4+ KB\n\n\n\n\nCode\nfmap = create_pco2_function_mapping_from_parameters(test_parameters)\n\n\n\n\nCode\ncolumnmapping\n\n\n{'stal': {'nh3': ['NH3 concentratie stal (ppm)'],\n  'co2': ['CO2 concentratie stal (ppm)'],\n  'temp': ['Temperatuur stal ©']},\n 'buiten': {'nh3': ['NH3 concentratie buiten (ppm)'],\n  'co2': ['CO2 concentratie buiten1 (ppm)',\n   'CO2 concentratie buiten2 (ppm)',\n   'CO2 concentratie buiten3 (ppm)'],\n  'temp': []}}\n\n\n\n\nCode\ndata.info()\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nDatetimeIndex: 5728 entries, 2025-08-19 00:00:00 to 2025-08-22 23:59:00\nData columns (total 7 columns):\n #   Column                          Non-Null Count  Dtype  \n---  ------                          --------------  -----  \n 0   NH3 concentratie stal (ppm)     5728 non-null   float64\n 1   NH3 concentratie buiten (ppm)   5728 non-null   float64\n 2   CO2 concentratie stal (ppm)     5728 non-null   float64\n 3   CO2 concentratie buiten1 (ppm)  5728 non-null   float64\n 4   CO2 concentratie buiten2 (ppm)  5728 non-null   float64\n 5   CO2 concentratie buiten3 (ppm)  5728 non-null   float64\n 6   Temperatuur stal ©              5728 non-null   float64\ndtypes: float64(7)\nmemory usage: 358.0 KB\n\n\n\n\nCode\nbezetting\n\n\n{'melkvee': {'aantal': 130},\n 'droogstaande koeien': {'aantal': 6},\n 'drachtig jongvee': {'aantal': 0},\n 'niet drachtig jongvee': {'aantal': 0}}\n\n\n\n\nCode\nfmap.get('melkvee')(**bezetting['melkvee'])\n\n\nnp.float64(36.46325050213528)\n\n\n\n\nCode\nPCO2_temperatuurcorrectie(\n    fmap.get('niet drachtig jongvee')(**bezetting['niet drachtig jongvee']),\n    temperatuur\n)\n\n\nTijd\n2025-08-19 00:00:00    0.0\n2025-08-19 00:01:00    0.0\n2025-08-19 00:02:00    0.0\n2025-08-19 00:03:00    0.0\n2025-08-19 00:04:00    0.0\n                      ... \n2025-08-22 23:55:00    0.0\n2025-08-22 23:56:00    0.0\n2025-08-22 23:57:00    0.0\n2025-08-22 23:58:00    0.0\n2025-08-22 23:59:00    0.0\nLength: 5728, dtype: float64\n\n\n\n\nCode\nPCO2_temperatuurcorrectie(\n    fmap.get('drachtig jongvee')(**bezetting['drachtig jongvee']),\n    temperatuur\n)\n\n\nTijd\n2025-08-19 00:00:00    0.0\n2025-08-19 00:01:00    0.0\n2025-08-19 00:02:00    0.0\n2025-08-19 00:03:00    0.0\n2025-08-19 00:04:00    0.0\n                      ... \n2025-08-22 23:55:00    0.0\n2025-08-22 23:56:00    0.0\n2025-08-22 23:57:00    0.0\n2025-08-22 23:58:00    0.0\n2025-08-22 23:59:00    0.0\nLength: 5728, dtype: float64\n\n\n\n\nCode\nPCO2_temperatuurcorrectie(\n    fmap.get('droogstaande koeien')(**bezetting['droogstaande koeien']),\n    temperatuur\n)\n\n\nTijd\n2025-08-19 00:00:00    1.063956\n2025-08-19 00:01:00    1.063528\n2025-08-19 00:02:00    1.063528\n2025-08-19 00:03:00    1.063956\n2025-08-19 00:04:00    1.063956\n                         ...   \n2025-08-22 23:55:00    1.084063\n2025-08-22 23:56:00    1.084063\n2025-08-22 23:57:00    1.084063\n2025-08-22 23:58:00    1.084491\n2025-08-22 23:59:00    1.084063\nLength: 5728, dtype: float64\n\n\n\n\nCode\nPCO2_temperatuurcorrectie(\n    fmap.get('melkvee')(**bezetting['melkvee']),\n    temperatuur\n).rename('melkvee')\n\n\nTijd\n2025-08-19 00:00:00    36.273642\n2025-08-19 00:01:00    36.259056\n2025-08-19 00:02:00    36.259056\n2025-08-19 00:03:00    36.273642\n2025-08-19 00:04:00    36.273642\n                         ...    \n2025-08-22 23:55:00    36.959151\n2025-08-22 23:56:00    36.959151\n2025-08-22 23:57:00    36.959151\n2025-08-22 23:58:00    36.973736\n2025-08-22 23:59:00    36.959151\nName: melkvee, Length: 5728, dtype: float64\n\n\n\n\nCode\npd.concat(\n        [\n            PCO2_temperatuurcorrectie(\n                fmap.get(category)(**params)*5,\n                temperatuur\n            ).rename(category)\n            for category, params in bezetting.items()\n        ], axis=1\n    ).sum(axis=1)\n\n\nTijd\n2025-08-19 00:00:00    186.687989\n2025-08-19 00:01:00    186.612923\n2025-08-19 00:02:00    186.612923\n2025-08-19 00:03:00    186.687989\n2025-08-19 00:04:00    186.687989\n                          ...    \n2025-08-22 23:55:00    190.216069\n2025-08-22 23:56:00    190.216069\n2025-08-22 23:57:00    190.216069\n2025-08-22 23:58:00    190.291135\n2025-08-22 23:59:00    190.216069\nLength: 5728, dtype: float64\n\n\n\n\nCode\nemissie = calculate_emission(\n    data=data,\n    pco2_parameters=test_parameters,\n    bezetting=bezetting,\n    interpolate=dict(interval='7min', method='linear')\n).resample('1h').mean()\n\n\n\n\nCode\nemissie / emissie.mean()\n\n\nTijd\n2025-08-19 00:00:00    0.420778\n2025-08-19 01:00:00    0.428174\n2025-08-19 02:00:00    0.395387\n2025-08-19 03:00:00    0.496850\n2025-08-19 04:00:00    0.615691\n                         ...   \n2025-08-22 19:00:00    0.489988\n2025-08-22 20:00:00    0.245229\n2025-08-22 21:00:00    0.267093\n2025-08-22 22:00:00    0.573332\n2025-08-22 23:00:00    0.595650\nFreq: h, Length: 96, dtype: float64\n\n\n\n\nCode\ntest_dataframe.info()\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nDatetimeIndex: 5760 entries, 2025-08-19 00:00:00 to 2025-08-22 23:59:00\nData columns (total 34 columns):\n #   Column                           Non-Null Count  Dtype  \n---  ------                           --------------  -----  \n 0   NH3 concentratie stal (ppm)      5758 non-null   float64\n 1   NH3 concentratie buiten (ppm)    5758 non-null   float64\n 2   CO2 concentratie stal (ppm)      5758 non-null   float64\n 3   CO2 concentratie buiten1 (ppm)   5752 non-null   float64\n 4   CO2 concentratie buiten2 (ppm)   5750 non-null   float64\n 5   CO2 concentratie buiten3 (ppm)   5748 non-null   float64\n 6   Temperatuur stal ©               5752 non-null   float64\n 7   Temperatuur buiten1 ©            5752 non-null   float64\n 8   Temperatuur buiten2 ©            5750 non-null   float64\n 9   Temperatuur buiten3 ©            5748 non-null   float64\n 10  Luchtvochtigheid stal (%)        5752 non-null   float64\n 11  Luchtvochtigheid buiten1 (%)     5752 non-null   float64\n 12  Luchtvochtigheid buiten2 (%)     5750 non-null   float64\n 13  Luchtvochtigheid buiten3 (%)     5748 non-null   float64\n 14  Temperatuur meetbuis ©           5758 non-null   float64\n 15  Luchtvochtigheid meetbuis (%)    5758 non-null   float64\n 16  Windrichting (graden)            96 non-null     float64\n 17  Windsnelheid (km/u)              96 non-null     float64\n 18  NH3 concentratie stal (mg/m3)    5760 non-null   float64\n 19  NH3 concentratie buiten (mg/m3)  5760 non-null   int64  \n 20  CO2 concentratie stal (mg/m3)    5760 non-null   float64\n 21  CO2 concentatie buiten (mg/m3)   5760 non-null   float64\n 22  CO2 correctie (ppm)              5760 non-null   int64  \n 23  CO2 correctie (mg/m3)            5760 non-null   float64\n 24  PCO2 correctie                   5760 non-null   float64\n 25  Ventilatiedebiet (m3/u)          5760 non-null   float64\n 26  Ventilatiedebiet (m3/dier/u)     5758 non-null   float64\n 27  NH3 emissie (kg/u)               5760 non-null   float64\n 28  NH3 emissie (kg/j)               5760 non-null   float64\n 29  NH3 emissie (kg/dp/j)            5760 non-null   float64\n 30  Ventilatiedebiet (m3/u).1        5752 non-null   float64\n 31  NH3 emissie (kg/u).1             5752 non-null   float64\n 32  NH3 emissie (kg/j).1             5752 non-null   float64\n 33  NH3 emissie (kg/dp/j).1          5752 non-null   float64\ndtypes: float64(32), int64(2)\nmemory usage: 1.5 MB\n\n\n\n\nCode\ntest_dataframe\n\n\n\n\n\n\n\n\n\nNH3 concentratie stal (ppm)\nNH3 concentratie buiten (ppm)\nCO2 concentratie stal (ppm)\nCO2 concentratie buiten1 (ppm)\nCO2 concentratie buiten2 (ppm)\nCO2 concentratie buiten3 (ppm)\nTemperatuur stal ©\nTemperatuur buiten1 ©\nTemperatuur buiten2 ©\nTemperatuur buiten3 ©\n...\nPCO2 correctie\nVentilatiedebiet (m3/u)\nVentilatiedebiet (m3/dier/u)\nNH3 emissie (kg/u)\nNH3 emissie (kg/j)\nNH3 emissie (kg/dp/j)\nVentilatiedebiet (m3/u).1\nNH3 emissie (kg/u).1\nNH3 emissie (kg/j).1\nNH3 emissie (kg/dp/j).1\n\n\nTijd\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2025-08-19 00:00:00\n2.9\n0.0\n896.0\n369.0\n491.0\n452.0\n21.3\n19.4\n19.2\n20.3\n...\n186.687989\n70849.331616\n520.950968\n0.143111\n1253.648593\n7.374403\n74000.0\n0.15\n1324.09\n7.79\n\n\n2025-08-19 00:01:00\n3.0\n0.0\n898.0\n370.0\n494.0\n453.0\n21.4\n19.4\n19.3\n20.3\n...\n186.612923\n70686.713361\n519.755245\n0.147706\n1293.901172\n7.611183\n73763.0\n0.15\n1346.91\n7.92\n\n\n2025-08-19 00:02:00\n3.0\n0.0\n900.0\n370.0\n497.0\n453.0\n21.4\n19.4\n19.2\n20.3\n...\n186.612923\n70419.971046\n517.793905\n0.147148\n1289.018526\n7.582462\n73464.0\n0.15\n1341.45\n7.89\n\n\n2025-08-19 00:03:00\n3.0\n0.0\n908.0\n368.0\n496.0\n455.0\n21.3\n19.4\n19.2\n20.3\n...\n186.687989\n69143.699559\n508.409556\n0.144481\n1265.656721\n7.445040\n72125.0\n0.15\n1318.32\n7.75\n\n\n2025-08-19 00:04:00\n3.0\n0.0\n910.0\n367.0\n494.0\n456.0\n21.3\n19.3\n19.2\n20.3\n...\n186.687989\n68761.690169\n505.600663\n0.143683\n1258.664143\n7.403907\n71715.0\n0.15\n1312.79\n7.72\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n2025-08-22 23:55:00\n2.1\n0.0\n611.0\n395.0\n490.0\n483.0\n16.6\n15.0\n14.9\n16.4\n...\n190.216069\n176125.989829\n1295.044043\n0.257621\n2256.757029\n13.275041\n183621.0\n0.30\n2597.60\n15.28\n\n\n2025-08-22 23:56:00\n2.2\n0.0\n607.0\n396.0\n489.0\n484.0\n16.6\n15.0\n14.9\n16.4\n...\n190.216069\n180299.591483\n1325.732290\n0.276284\n2420.245859\n14.236740\n188244.0\n0.31\n2691.75\n15.83\n\n\n2025-08-22 23:57:00\n2.1\n0.0\n603.0\n394.0\n488.0\n487.0\n16.6\n15.0\n14.9\n16.5\n...\n190.216069\n182024.946426\n1338.418724\n0.266249\n2332.342192\n13.719660\n189992.0\n0.30\n2604.49\n15.32\n\n\n2025-08-22 23:58:00\n2.1\n0.0\n600.0\n395.0\n486.0\n491.0\n16.5\n15.0\n14.9\n16.5\n...\n190.291135\n185649.887367\n1365.072701\n0.271551\n2378.789687\n13.992881\n193900.0\n0.31\n2727.22\n16.04\n\n\n2025-08-22 23:59:00\n2.1\n0.0\n599.0\n397.0\n485.0\n492.0\n16.6\n15.0\n14.9\n16.5\n...\n190.216069\n188332.741599\n1384.799571\n0.275476\n2413.165932\n14.195094\n196860.0\n0.31\n2707.79\n15.93\n\n\n\n\n5760 rows × 34 columns\n\n\n\n\n\nCode\nprint(json.dumps(extract_column_names(test_dataframe), indent=2))\n\n\n{\n  \"stal\": {\n    \"nh3\": [\n      \"NH3 concentratie stal (ppm)\",\n      \"NH3 concentratie stal (mg/m3)\"\n    ],\n    \"co2\": [\n      \"CO2 concentratie stal (ppm)\",\n      \"CO2 concentratie stal (mg/m3)\"\n    ],\n    \"temp\": [\n      \"Temperatuur stal \\u00a9\"\n    ]\n  },\n  \"buiten\": {\n    \"nh3\": [\n      \"NH3 concentratie buiten (ppm)\",\n      \"NH3 concentratie buiten (mg/m3)\"\n    ],\n    \"co2\": [\n      \"CO2 concentratie buiten1 (ppm)\",\n      \"CO2 concentratie buiten2 (ppm)\",\n      \"CO2 concentratie buiten3 (ppm)\",\n      \"CO2 concentatie buiten (mg/m3)\"\n    ],\n    \"temp\": [\n      \"Temperatuur buiten1 \\u00a9\",\n      \"Temperatuur buiten2 \\u00a9\",\n      \"Temperatuur buiten3 \\u00a9\"\n    ]\n  }\n}\n\n\n\n\nCode\nimport nbdev; nbdev.nbdev_export()",
    "crumbs": [
      "Barn Mass Balance"
    ]
  }
]